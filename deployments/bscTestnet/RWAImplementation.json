{
  "address": "0xb3766Eb647cF846F241C23CAfd3ff47ba8C7c7B5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valuesLength",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC1155MissingApprovalForAll",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "StringsInsufficientHexLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressBook",
      "outputs": [
        {
          "internalType": "contract AddressBook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entityId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entityOwnerId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entityOwnerType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialAddressBook",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "initialEntityId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "initialEntityOwnerId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "initialEntityOwnerType",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniqueContractId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f8df141c7521e6f50180585045d076ae287569c342b9cbaeca3e70d06e603bc",
  "receipt": {
    "to": null,
    "from": "0x208aBf72Cd5F40414768A5FD40F005aca71FC698",
    "contractAddress": "0xb3766Eb647cF846F241C23CAfd3ff47ba8C7c7B5",
    "transactionIndex": 2,
    "gasUsed": "2744143",
    "logsBloom": "0x
    "blockHash": "0x77fb0701fdf3e0280469bd311899fcb128d34dfbf926e5fbefeb32e251fe3843",
    "transactionHash": "0x7f8df141c7521e6f50180585045d076ae287569c342b9cbaeca3e70d06e603bc",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 52051179,
        "transactionHash": "0x7f8df141c7521e6f50180585045d076ae287569c342b9cbaeca3e70d06e603bc",
        "address": "0xb3766Eb647cF846F241C23CAfd3ff47ba8C7c7B5",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x77fb0701fdf3e0280469bd311899fcb128d34dfbf926e5fbefeb32e251fe3843"
      }
    ],
    "blockNumber": 52051179,
    "cumulativeGasUsed": "3014601",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3b084e33ac928c42a5c86b6d7549fb77",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressBook\",\"outputs\":[{\"internalType\":\"contract AddressBook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entityId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entityOwnerId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entityOwnerType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAddressBook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"initialEntityId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"initialEntityOwnerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"initialEntityOwnerType\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueContractId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements ERC1155 standard with upgradeable functionality\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256)\":{\"details\":\"Can only be called by the associated pool\",\"params\":{\"account\":\"The address to burn tokens from\",\"amount\":\"The amount of tokens to burn\",\"tokenId\":\"The ID of the token to burn\"}},\"createToken(address)\":{\"details\":\"Can only be called by the factory address registered in AddressBook\",\"params\":{\"pool\":\"The address of the pool managing this token\"},\"returns\":{\"_0\":\"uint256 token id\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"initialize(address,address,string,string,string)\":{\"details\":\"Can only be called once\",\"params\":{\"initialAddressBook\":\"Address of the AddressBook contract\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(address,uint256,uint256)\":{\"details\":\"Can only be called by the associated pool\",\"params\":{\"account\":\"The address to mint tokens to\",\"amount\":\"The amount of tokens to mint\",\"tokenId\":\"The ID of the token to mint\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"totalSupply()\":{\"details\":\"Total value of tokens.\"},\"totalSupply(uint256)\":{\"details\":\"Total value of tokens in with a given id.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"uri(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token\"},\"returns\":{\"_0\":\"string The complete metadata URI for the token\"}}},\"title\":\"RWA Token Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressBook()\":{\"notice\":\"Address book contract reference\"},\"burn(address,uint256,uint256)\":{\"notice\":\"Burns tokens\"},\"createToken(address)\":{\"notice\":\"Creates a new token with specified parameters\"},\"initialize(address,address,string,string,string)\":{\"notice\":\"Initializes the contract\"},\"mint(address,uint256,uint256)\":{\"notice\":\"Mints tokens\"},\"owner()\":{\"notice\":\"Owner address\"},\"pools(uint256)\":{\"notice\":\"Mapping of token ID to pool address\"},\"tokensLength()\":{\"notice\":\"Unique token ID amount\"},\"uri(uint256)\":{\"notice\":\"Gets the metadata URI for a specific token\"}},\"notice\":\"Contract for managing real world asset tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rwa/RWA.sol\":\"RWA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd861907d1168dcaec2a7846edbaed12feb8bad2d6781dba987be01374f90b495\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {ERC1155Utils} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155\\n    struct ERC1155Storage {\\n        mapping(uint256 id => mapping(address account => uint256)) _balances;\\n\\n        mapping(address account => mapping(address operator => bool)) _operatorApprovals;\\n\\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n        string _uri;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155StorageLocation = 0x88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500;\\n\\n    function _getERC1155Storage() private pure returns (ERC1155Storage storage $) {\\n        assembly {\\n            $.slot := ERC1155StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = $._balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    $._balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                $._balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                ERC1155Utils.checkOnERC1155Received(operator, from, to, id, value, data);\\n            } else {\\n                ERC1155Utils.checkOnERC1155BatchReceived(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        $._uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        assembly (\\\"memory-safe\\\") {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a0d63838dff3fd8b77c8c44ecf37cc39b15f26fd5269da3b690879478fa3cf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155Upgradeable} from \\\"../ERC1155Upgradeable.sol\\\";\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC-1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n *\\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\\n * that can be minted.\\n *\\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    using Arrays for uint256[];\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155Supply\\n    struct ERC1155SupplyStorage {\\n        mapping(uint256 id => uint256) _totalSupply;\\n        uint256 _totalSupplyAll;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155Supply\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155SupplyStorageLocation = 0x4a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2800;\\n\\n    function _getERC1155SupplyStorage() private pure returns (ERC1155SupplyStorage storage $) {\\n        assembly {\\n            $.slot := ERC1155SupplyStorageLocation\\n        }\\n    }\\n\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Total value of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        return $._totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Total value of tokens.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        return $._totalSupplyAll;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_update}.\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal virtual override {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        super._update(from, to, ids, values);\\n\\n        if (from == address(0)) {\\n            uint256 totalMintValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values.unsafeMemoryAccess(i);\\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n                $._totalSupply[ids.unsafeMemoryAccess(i)] += value;\\n                totalMintValue += value;\\n            }\\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\\n            $._totalSupplyAll += totalMintValue;\\n        }\\n\\n        if (to == address(0)) {\\n            uint256 totalBurnValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values.unsafeMemoryAccess(i);\\n\\n                unchecked {\\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\\n                    $._totalSupply[ids.unsafeMemoryAccess(i)] -= value;\\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                    totalBurnValue += value;\\n                }\\n            }\\n            unchecked {\\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                $._totalSupplyAll -= totalBurnValue;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x82e5758c4890ae988fd2af513770764a7d651bfddd5e319a3d194813ca767fef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c54228bbb2f1f8616179c51bdb90b7960f4a3414c390ad5c6ead6763eb55a59\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x4aaaf1c0737dd16e81f0d2b9833c549747a5ede6873bf1444bc72aa572d03e98\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"./ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address implementation, bytes memory _data) payable {\\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return ERC1967Utils.getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa3066ff86b94128a9d3956a63a0511fa1aae41bd455772ab587b32ff322acb2e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x68d6fdbeb467192c3627a46aa7bf5cbb73267363b740abc511f521a5a41a446e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[ERC].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x35d120c427299af1525aaf07955314d9e36a62f14408eb93dec71a2e001f74d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/utils/ERC1155Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\nimport {IERC1155Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-1155 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-1155[ERC-1155].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC1155Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC1155-onERC1155Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check for the provided `operator` by calling {IERC1155-onERC1155BatchReceived}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x30afe9013aaeb3ba735284a9310792776f57a3b2db6fc1d99628f2c47287f5cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Arrays.sol)\\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Comparators} from \\\"./Comparators.sol\\\";\\nimport {SlotDerivation} from \\\"./SlotDerivation.sol\\\";\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using SlotDerivation for bytes32;\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        uint256[] memory array,\\n        function(uint256, uint256) pure returns (bool) comp\\n    ) internal pure returns (uint256[] memory) {\\n        _quickSort(_begin(array), _end(array), comp);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\\n     */\\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        sort(array, Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of address (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        address[] memory array,\\n        function(address, address) pure returns (bool) comp\\n    ) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\\n     */\\n    function sort(address[] memory array) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        bytes32[] memory array,\\n        function(bytes32, bytes32) pure returns (bool) comp\\n    ) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\\n     */\\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\\n     * at end (exclusive). Sorting follows the `comp` comparator.\\n     *\\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\\n     *\\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\\n     * be used only if the limits are within a memory array.\\n     */\\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\\n        unchecked {\\n            if (end - begin < 0x40) return;\\n\\n            // Use first element as pivot\\n            uint256 pivot = _mload(begin);\\n            // Position where the pivot should be at the end of the loop\\n            uint256 pos = begin;\\n\\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\\n                if (comp(_mload(it), pivot)) {\\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\\n                    // position of the pivot and move the value there.\\n                    pos += 0x20;\\n                    _swap(pos, it);\\n                }\\n            }\\n\\n            _swap(begin, pos); // Swap pivot into place\\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first element of `array`.\\n     */\\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := add(array, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\\n     * that comes just after the last element of the array.\\n     */\\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\\n        unchecked {\\n            return _begin(array) + array.length * 0x20;\\n        }\\n    }\\n\\n    /**\\n     * @dev Load memory word (as a uint256) at location `ptr`.\\n     */\\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\\n     */\\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\\n        assembly {\\n            let value1 := mload(ptr1)\\n            let value2 := mload(ptr2)\\n            mstore(ptr1, value2)\\n            mstore(ptr2, value1)\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address memory array to uint256 memory array\\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(address, address) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(bytes32, bytes32) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\\n     * contain no repeated elements.\\n     *\\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\\n     * support for repeated elements in the array. The {lowerBound} function should\\n     * be used instead.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value greater or equal than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\\n     */\\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value strictly greater than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\\n     */\\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {lowerBound}, but with an array in memory.\\n     */\\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {upperBound}, but with an array in memory.\\n     */\\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf9586854de33dc9d3a7160cad8170fdfb4119d02a44bad90ba16d71d701cc92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Comparators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to compare values.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Comparators {\\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a > b;\\n    }\\n}\\n\",\"keccak256\":\"0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SlotDerivation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/SlotDerivation.sol)\\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\\n * the solidity language / compiler.\\n *\\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\\n *\\n * Example usage:\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using StorageSlot for bytes32;\\n *     using SlotDerivation for bytes32;\\n *\\n *     // Declare a namespace\\n *     string private constant _NAMESPACE = \\\"<namespace>\\\" // eg. OpenZeppelin.Slot\\n *\\n *     function setValueInNamespace(uint256 key, address newValue) internal {\\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\\n *     }\\n *\\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {StorageSlot}.\\n *\\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\\n * upgrade safety will ignore the slots accessed through this library.\\n *\\n * _Available since v5.1._\\n */\\nlibrary SlotDerivation {\\n    /**\\n     * @dev Derive an ERC-7201 slot from a string (namespace).\\n     */\\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\\n            slot := and(keccak256(0x00, 0x20), not(0xff))\\n        }\\n    }\\n\\n    /**\\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\\n     */\\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\\n        unchecked {\\n            return bytes32(uint256(slot) + pos);\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\\n     */\\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, slot)\\n            result := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, and(key, shr(96, not(0))))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, iszero(iszero(key)))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8447b57b63810fe2e367c09496a966f143ec0e825d71ddb9fce2506cff84b618\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC-1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC-1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        if (signer.code.length == 0) {\\n            (address recovered, ECDSA.RecoverError err, ) = ECDSA.tryRecover(hash, signature);\\n            return err == ECDSA.RecoverError.NoError && recovered == signer;\\n        } else {\\n            return isValidERC1271SignatureNow(signer, hash, signature);\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC-1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbdc3bb48ccedb818cd75a6d74a16df55a822e9f6d3cc54c59f576f10aab67b5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/dao/DaoStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\n\\r\\n/// @title DAO Staking Contract\\r\\n/// @notice Manages token staking for governance voting power\\r\\ncontract DaoStaking is UUPSUpgradeable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n\\r\\n    /// @notice Maximum voting period length in seconds\\r\\n    uint256 public maxVotingPeriod;\\r\\n\\r\\n    /// @notice Total amount of staked tokens\\r\\n    uint256 public totalStaked;\\r\\n\\r\\n    /// @notice User staking information\\r\\n    struct StakeInfo {\\r\\n        uint256 amount;\\r\\n        uint256 lockedUntil;\\r\\n    }\\r\\n\\r\\n    /// @notice Mapping from user address to their stake info\\r\\n    mapping(address => StakeInfo) public stakes;\\r\\n\\r\\n    /// @notice Constructor that disables initializers\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    /// @param initialAddressBook Address of AddressBook contract\\r\\n    /// @param initialMaxVotingPeriod Initial maximum voting period\\r\\n    function initialize(\\r\\n        address initialAddressBook,\\r\\n        uint256 initialMaxVotingPeriod\\r\\n    ) external initializer {\\r\\n        __UUPSUpgradeable_init();\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n        \\r\\n        maxVotingPeriod = initialMaxVotingPeriod;\\r\\n    }\\r\\n\\r\\n    /// @notice Stakes tokens for voting power\\r\\n    /// @param amount Amount to stake\\r\\n    function stake(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\r\\n        \\r\\n        StakeInfo storage userStake = stakes[msg.sender];\\r\\n        userStake.amount += amount;\\r\\n        \\r\\n        // If no active lock, set lock to current max voting period\\r\\n        if (userStake.lockedUntil < block.timestamp) {\\r\\n            userStake.lockedUntil = block.timestamp + maxVotingPeriod;\\r\\n        }\\r\\n        \\r\\n        totalStaked += amount;\\r\\n\\r\\n        IERC20(addressBook.daoToken()).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Unstakes tokens after lock period\\r\\n    /// @param amount Amount to unstake\\r\\n    function unstake(uint256 amount) external {\\r\\n        StakeInfo storage userStake = stakes[msg.sender];\\r\\n        require(amount > 0, \\\"Cannot unstake 0\\\");\\r\\n        require(amount <= userStake.amount, \\\"Insufficient stake\\\");\\r\\n        require(block.timestamp >= userStake.lockedUntil, \\\"Still locked\\\");\\r\\n        \\r\\n        userStake.amount -= amount;\\r\\n        totalStaked -= amount;\\r\\n\\r\\n        // Reset lock if fully unstaked\\r\\n        if (userStake.amount == 0) {\\r\\n            userStake.lockedUntil = 0;\\r\\n        }\\r\\n\\r\\n        IERC20(addressBook.daoToken()).safeTransfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Extends lock period\\r\\n    /// @dev Called by Governance contract when user votes\\r\\n    /// @param user Address of voter\\r\\n    function extendLock(address user) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(stakes[user].amount > 0, \\\"No stake\\\");\\r\\n        \\r\\n        uint256 newLockEnd = block.timestamp + maxVotingPeriod;\\r\\n        require(newLockEnd > stakes[user].lockedUntil, \\\"Lock not extended\\\");\\r\\n        \\r\\n        stakes[user].lockedUntil = newLockEnd;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns user's current voting power\\r\\n    /// @param user Address to check\\r\\n    /// @return Voting power (staked amount)\\r\\n    function getVotes(address user) external view returns (uint256) {\\r\\n        return stakes[user].amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates maximum voting period\\r\\n    /// @param newMaxVotingPeriod New period length\\r\\n    function setMaxVotingPeriod(uint256 newMaxVotingPeriod) external {\\r\\n        addressBook.requireTimelock(msg.sender);\\r\\n        maxVotingPeriod = newMaxVotingPeriod;\\r\\n    }\\r\\n\\r\\n    /// @notice Authorizes upgrade\\r\\n    /// @param newImplementation Address of new implementation\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x201f699674f317ffc6dc99dee83db27f1cf4317bc9bcb2e7484cfec55c7cd39e\",\"license\":\"MIT\"},\"contracts/dao/DaoToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\n\\r\\n/// @title DAO Governance Token\\r\\n/// @notice Simple ERC20 token for DAO governance\\r\\ncontract DaoToken is UUPSUpgradeable, ERC20Upgradeable {\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n\\r\\n    /// @notice Constructor that disables initializers\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    /// @param initialAddressBook Address of AddressBook contract\\r\\n    /// @param initialName Token name\\r\\n    /// @param initialSymbol Token symbol\\r\\n    /// @param initialHolders List of initail holders (users/contracts)\\r\\n    /// @param initialSymbol List of initial amount (index to holders)\\r\\n    function initialize(\\r\\n        address initialAddressBook,\\r\\n        string calldata initialName,\\r\\n        string calldata initialSymbol,\\r\\n        address[] calldata initialHolders,\\r\\n        uint256[] calldata initialAmounts\\r\\n    ) external initializer {\\r\\n        __UUPSUpgradeable_init();\\r\\n        __ERC20_init(initialName, initialSymbol);\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n\\r\\n        require(initialHolders.length == initialAmounts.length, \\\"initialHolders length!\\\");\\r\\n        for (uint256 i; i < initialHolders.length; ++i) {\\r\\n            _mint(initialHolders[i], initialAmounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Override transfer function to emit additional event\\r\\n    function _update(address from, address to, uint256 amount) internal virtual override {\\r\\n        super._update(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Authorizes upgrade\\r\\n    /// @param newImplementation Address of new implementation\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9607ba618ed8ce3870df586842d6e397ace42a7c0a84d94271bb4874c026c15f\",\"license\":\"MIT\"},\"contracts/dao/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\nimport { DaoStaking } from \\\"./DaoStaking.sol\\\";\\r\\n\\r\\n/// @title DAO Governance Contract\\r\\n/// @notice Manages proposal creation and voting\\r\\ncontract Governance is UUPSUpgradeable {\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n    \\r\\n    /// @notice Proposal state enum\\r\\n    enum ProposalState {\\r\\n        Active,\\r\\n        Canceled,\\r\\n        Defeated,\\r\\n        Succeeded,\\r\\n        Executed\\r\\n    }\\r\\n\\r\\n    /// @notice Proposal information\\r\\n    /// @param proposer Address who created proposal\\r\\n    /// @param targets Target addresses for calls\\r\\n    /// @param values ETH values for calls\\r\\n    /// @param calldatas Calldata for calls\\r\\n    /// @param description Proposal description\\r\\n    /// @param startTime Timestamp when voting starts\\r\\n    /// @param endTime Timestamp when voting ends\\r\\n    /// @param forVotes Amount of votes for proposal\\r\\n    /// @param againstVotes Amount of votes against proposal\\r\\n    /// @param executed Whether proposal was executed\\r\\n    /// @param canceled Whether proposal was canceled\\r\\n    struct Proposal {\\r\\n        address proposer;\\r\\n        address[] targets;\\r\\n        uint256[] values;\\r\\n        bytes[] calldatas;\\r\\n        string description;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        uint256 forVotes;\\r\\n        uint256 againstVotes;\\r\\n        bool executed;\\r\\n        bool canceled;\\r\\n    }\\r\\n\\r\\n    /// @notice Voting receipt for a voter\\r\\n    struct Receipt {\\r\\n        bool hasVoted;\\r\\n        bool support;\\r\\n        uint256 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice Minimum votes required to create proposal\\r\\n    uint256 public proposalThreshold;\\r\\n    \\r\\n    /// @notice Minimum percentage of total voting power that must vote for proposal to succeed\\r\\n    uint256 public quorumNumerator;\\r\\n    \\r\\n    /// @notice Time delay before voting starts after proposal creation\\r\\n    uint256 public votingDelay;\\r\\n    \\r\\n    /// @notice Duration of voting period\\r\\n    uint256 public votingPeriod;\\r\\n\\r\\n    /// @notice Mapping from proposal ID to proposal\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n    \\r\\n    /// @notice Mapping from proposal ID to voter address to receipt\\r\\n    mapping(uint256 => mapping(address => Receipt)) public receipts;\\r\\n    \\r\\n    /// @notice Counter for proposal IDs\\r\\n    uint256 public proposalCount;\\r\\n\\r\\n    /// @notice Constructor that disables initializers\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    function initialize(\\r\\n        address initialAddressBook,\\r\\n        uint256 initialProposalThreshold,\\r\\n        uint256 initialQuorumNumerator,\\r\\n        uint256 initialVotingDelay,\\r\\n        uint256 initialVotingPeriod\\r\\n    ) external initializer {\\r\\n        require(initialQuorumNumerator <= 100, \\\"Invalid quorum\\\");\\r\\n        \\r\\n        __UUPSUpgradeable_init();\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n        proposalThreshold = initialProposalThreshold;\\r\\n        quorumNumerator = initialQuorumNumerator;\\r\\n        votingDelay = initialVotingDelay;\\r\\n        votingPeriod = initialVotingPeriod;\\r\\n    }\\r\\n\\r\\n    /// @notice Creates a new proposal\\r\\n    function propose(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        string memory description\\r\\n    ) external returns (uint256) {\\r\\n        DaoStaking staking = DaoStaking(addressBook.daoStaking());\\r\\n        require(\\r\\n            staking.getVotes(msg.sender) >= proposalThreshold,\\r\\n            \\\"Below proposal threshold\\\"\\r\\n        );\\r\\n        \\r\\n        require(\\r\\n            targets.length == values.length &&\\r\\n            targets.length == calldatas.length,\\r\\n            \\\"Invalid proposal\\\"\\r\\n        );\\r\\n\\r\\n        uint256 proposalId = ++proposalCount;\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        \\r\\n        proposal.proposer = msg.sender;\\r\\n        proposal.targets = targets;\\r\\n        proposal.values = values;\\r\\n        proposal.calldatas = calldatas;\\r\\n        proposal.description = description;\\r\\n        proposal.startTime = block.timestamp + votingDelay;\\r\\n        proposal.endTime = proposal.startTime + votingPeriod;\\r\\n\\r\\n        return proposalId;\\r\\n    }\\r\\n\\r\\n    /// @notice Casts vote on proposal\\r\\n    function castVote(uint256 proposalId, bool support) external {\\r\\n        require(state(proposalId) == ProposalState.Active, \\\"Proposal not active\\\");\\r\\n        \\r\\n        Receipt storage receipt = receipts[proposalId][msg.sender];\\r\\n        require(!receipt.hasVoted, \\\"Already voted\\\");\\r\\n\\r\\n        DaoStaking staking = DaoStaking(addressBook.daoStaking());\\r\\n        uint256 votes = staking.getVotes(msg.sender);\\r\\n        require(votes > 0, \\\"No voting power\\\");\\r\\n\\r\\n        receipt.hasVoted = true;\\r\\n        receipt.support = support;\\r\\n        receipt.votes = votes;\\r\\n\\r\\n        if (support) {\\r\\n            proposals[proposalId].forVotes += votes;\\r\\n        } else {\\r\\n            proposals[proposalId].againstVotes += votes;\\r\\n        }\\r\\n\\r\\n        // Extend lock period in staking contract\\r\\n        staking.extendLock(msg.sender);\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Executes a successful proposal\\r\\n    function execute(uint256 proposalId) external payable {\\r\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"Proposal not succeeded\\\");\\r\\n        \\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        proposal.executed = true;\\r\\n\\r\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\r\\n            (bool success, ) = proposal.targets[i].call{value: proposal.values[i]}(\\r\\n                proposal.calldatas[i]\\r\\n            );\\r\\n            require(success, \\\"Proposal execution failed\\\");\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Cancels a proposal\\r\\n    function cancel(uint256 proposalId) external {\\r\\n        require(state(proposalId) == ProposalState.Active, \\\"Cannot cancel\\\");\\r\\n        require(\\r\\n            msg.sender == proposals[proposalId].proposer ||\\r\\n            address(addressBook.timelock()) == msg.sender,\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n\\r\\n        proposals[proposalId].canceled = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets current state of proposal\\r\\n    function state(uint256 proposalId) public view returns (ProposalState) {\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        \\r\\n        if (proposal.canceled) {\\r\\n            return ProposalState.Canceled;\\r\\n        }\\r\\n        \\r\\n        if (proposal.executed) {\\r\\n            return ProposalState.Executed;\\r\\n        }\\r\\n\\r\\n        if (block.timestamp <= proposal.endTime) {\\r\\n            return ProposalState.Active;\\r\\n        }\\r\\n\\r\\n        DaoStaking staking = DaoStaking(addressBook.daoStaking());\\r\\n        uint256 totalSupply = staking.totalStaked();\\r\\n        \\r\\n        if (\\r\\n            proposal.forVotes <= proposal.againstVotes ||\\r\\n            proposal.forVotes + proposal.againstVotes < (totalSupply * quorumNumerator) / 100\\r\\n        ) {\\r\\n            return ProposalState.Defeated;\\r\\n        }\\r\\n\\r\\n        return ProposalState.Succeeded;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates governance parameters\\r\\n    function updateParams(\\r\\n        uint256 newProposalThreshold,\\r\\n        uint256 newQuorumNumerator,\\r\\n        uint256 newVotingDelay,\\r\\n        uint256 newVotingPeriod\\r\\n    ) external {\\r\\n        addressBook.requireTimelock(msg.sender);\\r\\n        require(newQuorumNumerator <= 100, \\\"Invalid quorum\\\");\\r\\n        \\r\\n        proposalThreshold = newProposalThreshold;\\r\\n        quorumNumerator = newQuorumNumerator;\\r\\n        votingDelay = newVotingDelay;\\r\\n        votingPeriod = newVotingPeriod;\\r\\n    }\\r\\n\\r\\n    /// @notice Authorizes upgrade\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd6edb92ae877b64255f8c4f9060b3e9fa3c5b93a0083cf52b84817ee58861d0f\",\"license\":\"MIT\"},\"contracts/dao/Timelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\n\\r\\n/// @title DAO Timelock Contract\\r\\n/// @notice Implements delayed execution of governance decisions\\r\\ncontract Timelock is UUPSUpgradeable {\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n\\r\\n    /// @notice Minimum delay for operations\\r\\n    uint256 public minDelay;\\r\\n\\r\\n    /// @notice Operation state\\r\\n    /// @param executed Whether operation was executed\\r\\n    /// @param canceled Whether operation was canceled\\r\\n    /// @param timestamp When operation can be executed\\r\\n    struct Operation {\\r\\n        bool executed;\\r\\n        bool canceled;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n    /// @notice Mapping from operation hash to its state\\r\\n    mapping(bytes32 => Operation) public operations;\\r\\n\\r\\n    /// @notice Constructor that disables initializers\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    /// @param initialAddressBook Address of AddressBook contract\\r\\n    /// @param initialMinDelay Initial minimum delay\\r\\n    function initialize(\\r\\n        address initialAddressBook,\\r\\n        uint256 initialMinDelay\\r\\n    ) external initializer {\\r\\n        __UUPSUpgradeable_init();\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n        minDelay = initialMinDelay;\\r\\n    }\\r\\n\\r\\n    /// @notice Schedules an operation\\r\\n    /// @param target Target address for call\\r\\n    /// @param value ETH value for call\\r\\n    /// @param data Calldata for call\\r\\n    /// @param delay Delay before execution (must be >= minDelay)\\r\\n    function schedule(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        bytes calldata data,\\r\\n        uint256 delay\\r\\n    ) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(delay >= minDelay, \\\"Delay too short\\\");\\r\\n\\r\\n        bytes32 operationId = getOperationId(target, value, data, delay);\\r\\n        require(operations[operationId].timestamp == 0, \\\"Operation exists\\\");\\r\\n\\r\\n        uint256 timestamp = block.timestamp + delay;\\r\\n        operations[operationId] = Operation({\\r\\n            executed: false,\\r\\n            canceled: false,\\r\\n            timestamp: timestamp\\r\\n        });\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Executes a scheduled operation\\r\\n    /// @param target Target address for call\\r\\n    /// @param value ETH value for call\\r\\n    /// @param data Calldata for call\\r\\n    /// @param delay Original delay used in scheduling\\r\\n    function execute(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        bytes calldata data,\\r\\n        uint256 delay\\r\\n    ) external payable {\\r\\n        bytes32 operationId = getOperationId(target, value, data, delay);\\r\\n        Operation storage op = operations[operationId];\\r\\n\\r\\n        require(op.timestamp > 0, \\\"Operation doesn't exist\\\");\\r\\n        require(!op.executed, \\\"Operation already executed\\\");\\r\\n        require(!op.canceled, \\\"Operation canceled\\\");\\r\\n        require(block.timestamp >= op.timestamp, \\\"Operation not ready\\\");\\r\\n\\r\\n        op.executed = true;\\r\\n\\r\\n        (bool success, ) = target.call{value: value}(data);\\r\\n        require(success, \\\"Operation execution failed\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Cancels a scheduled operation\\r\\n    /// @param target Target address for call\\r\\n    /// @param value ETH value for call\\r\\n    /// @param data Calldata for call\\r\\n    /// @param delay Original delay used in scheduling\\r\\n    function cancel(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        bytes calldata data,\\r\\n        uint256 delay\\r\\n    ) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n\\r\\n        bytes32 operationId = getOperationId(target, value, data, delay);\\r\\n        Operation storage op = operations[operationId];\\r\\n\\r\\n        require(op.timestamp > 0, \\\"Operation doesn't exist\\\");\\r\\n        require(!op.executed, \\\"Operation already executed\\\");\\r\\n        require(!op.canceled, \\\"Operation already canceled\\\");\\r\\n\\r\\n        op.canceled = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates minimum delay\\r\\n    /// @param newMinDelay New minimum delay\\r\\n    function updateMinDelay(uint256 newMinDelay) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        minDelay = newMinDelay;\\r\\n    }\\r\\n\\r\\n    /// @notice Generates operation ID hash\\r\\n    /// @param target Target address\\r\\n    /// @param value ETH value\\r\\n    /// @param data Calldata\\r\\n    /// @param delay Operation delay\\r\\n    /// @return Operation ID\\r\\n    function getOperationId(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        bytes calldata data,\\r\\n        uint256 delay\\r\\n    ) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(target, value, data, delay));\\r\\n    }\\r\\n\\r\\n    /// @notice Check if operation is ready\\r\\n    /// @param operationId Operation hash\\r\\n    /// @return Whether operation can be executed\\r\\n    function isOperationReady(bytes32 operationId) external view returns (bool) {\\r\\n        Operation storage op = operations[operationId];\\r\\n        return !op.executed && \\r\\n               !op.canceled && \\r\\n               op.timestamp > 0 && \\r\\n               block.timestamp >= op.timestamp;\\r\\n    }\\r\\n\\r\\n    /// @notice Check if operation exists\\r\\n    /// @param operationId Operation hash\\r\\n    /// @return Whether operation exists\\r\\n    function isOperationPending(bytes32 operationId) external view returns (bool) {\\r\\n        return operations[operationId].timestamp > 0;\\r\\n    }\\r\\n\\r\\n    /// @notice Authorizes upgrade\\r\\n    /// @param newImplementation Address of new implementation\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7e5a46919f10d15810a67d4155c493ca4962a6aaa5ca1081ff23c4376b65dd84\",\"license\":\"MIT\"},\"contracts/dao/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\nimport { EventEmitter } from \\\"../system/EventEmitter.sol\\\";\\r\\n\\r\\n/// @title DAO Treasury Contract\\r\\n/// @notice Manages DAO funds under timelock control\\r\\ncontract Treasury is UUPSUpgradeable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n    \\r\\n\\r\\n    /// @notice Constructor that disables initializers\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    /// @param initialAddressBook Address of AddressBook contract\\r\\n    function initialize(address initialAddressBook) external initializer {\\r\\n        __UUPSUpgradeable_init();\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws ERC20 tokens\\r\\n    /// @param token Token address\\r\\n    /// @param to Recipient address\\r\\n    /// @param amount Amount to withdraw\\r\\n    function withdrawERC20(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external {\\r\\n        addressBook.requireTimelock(msg.sender);\\r\\n        require(to != address(0), \\\"Zero address recipient\\\");\\r\\n        \\r\\n        IERC20(token).safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws ETH\\r\\n    /// @param to Recipient address\\r\\n    /// @param amount Amount to withdraw\\r\\n    function withdrawETH(address to, uint256 amount) external {\\r\\n        addressBook.requireTimelock(msg.sender);\\r\\n        require(to != address(0), \\\"Zero address recipient\\\");\\r\\n        require(address(this).balance >= amount, \\\"Insufficient ETH\\\");\\r\\n        \\r\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n        \\r\\n    }\\r\\n\\r\\n    /// @notice Returns balance of specified ERC20 token\\r\\n    /// @param token Token address\\r\\n    /// @return Token balance\\r\\n    function getTokenBalance(address token) external view returns (uint256) {\\r\\n        return IERC20(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Authorizes upgrade\\r\\n    /// @param newImplementation Address of new implementation\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows receiving ETH\\r\\n    receive() external payable {\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0682eaf0a9939f40bae4a7087106cdb4c8b9d3cbb3f318cd410f7ef0eb87112c\",\"license\":\"MIT\"},\"contracts/platform/Airdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\n\\r\\n/// @title Airdrop contract for ERC20 token distribution\\r\\n/// @notice Allows claiming tokens with backend signature verification\\r\\ncontract Airdrop is UUPSUpgradeable {\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n    \\r\\n    /// @notice Mapping to track used signatures\\r\\n    mapping(bytes32 => bool) public usedSignatures;\\r\\n\\r\\n    /// @notice Emitted when tokens are claimed\\r\\n    /// @param user Address of claimer\\r\\n    /// @param token ERC20 token address\\r\\n    /// @param amount Amount of tokens claimed\\r\\n    event Claimed(address indexed user, address indexed token, uint256 amount);\\r\\n\\r\\n    /// @notice Constructor that disables initializers\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    /// @param initialAddressBook Address of AddressBook contract\\r\\n    function initialize(address initialAddressBook) external initializer {\\r\\n        __UUPSUpgradeable_init_unchained();\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n    }\\r\\n\\r\\n    /// @notice Claims tokens with signature verification\\r\\n    /// @param token ERC20 token address to claim\\r\\n    /// @param amount Amount of tokens to claim\\r\\n    /// @param deadline Timestamp until which signature is valid\\r\\n    /// @param signature Signature from backend\\r\\n    // function claim(\\r\\n    //     address token,\\r\\n    //     uint256 amount,\\r\\n    //     uint256 deadline,\\r\\n    //     bytes calldata signature\\r\\n    // ) external {\\r\\n    //     require(block.timestamp <= deadline, \\\"Signature expired\\\");\\r\\n\\r\\n    //     bytes32 messageHash = MessageHashUtils.toEthSignedMessageHash(\\r\\n    //         keccak256(\\r\\n    //             abi.encodePacked(\\r\\n    //                 block.chainid,\\r\\n    //                 address(this),\\r\\n    //                 msg.sender,\\r\\n    //                 \\\"claim\\\",\\r\\n    //                 token,\\r\\n    //                 amount,\\r\\n    //                 deadline\\r\\n    //             )\\r\\n    //         )\\r\\n    //     );\\r\\n\\r\\n    //     require(!usedSignatures[messageHash], \\\"Signature already used\\\");\\r\\n    //     require(\\r\\n    //         SignatureChecker.isValidSignatureNow(addressBook.backend(), messageHash, signature),\\r\\n    //         \\\"Backend signature check failed\\\"\\r\\n    //     );\\r\\n\\r\\n    //     usedSignatures[messageHash] = true;\\r\\n        \\r\\n    //     require(IERC20(token).transfer(msg.sender, amount), \\\"Transfer failed\\\");\\r\\n        \\r\\n    //     emit Claimed(msg.sender, token, amount);\\r\\n    // }\\r\\n\\r\\n    /// @notice Authorizes upgrade\\r\\n    /// @param newImplementation Address of new implementation\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x63dfaac326a9bd6af142a4ee5f7d591d7cc07eb22457137fba9893d4cd05d284\",\"license\":\"MIT\"},\"contracts/platform/Payment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\nimport { EventEmitter } from \\\"../system/EventEmitter.sol\\\";\\r\\n\\r\\ncontract Payment is UUPSUpgradeable, ReentrancyGuardUpgradeable {\\r\\n    AddressBook public addressBook;\\r\\n\\r\\n    // Initializes the Payment contract with the given AddressBook address.\\r\\n    function initialize(address initialAddressBook) external initializer {\\r\\n        __UUPSUpgradeable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n    }\\r\\n\\r\\n    // Transfers tokens from the sender to the treasury and emits a payment event.\\r\\n    function processPayment(uint256 amount, string calldata userId) external nonReentrant {\\r\\n        address treasuryAddress = address(addressBook.treasury());\\r\\n\\r\\n        IERC20 token = addressBook.config().holdToken();\\r\\n\\r\\n        token.transferFrom(msg.sender, treasuryAddress, amount);\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    // Authorizes upgrades by requiring governance.\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa7d32b8ef2f6e72ef704479d40bfe7667c9768785887efc152e45df49ed9cd74\",\"license\":\"MIT\"},\"contracts/platform/PlatformStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\n\\r\\n// TODO: copy contract to dao token rewards\\r\\n\\r\\n/// @title Platform Staking Contract\\r\\n/// @notice Implements proportional share distribution based on token balance\\r\\ncontract PlatformStaking is UUPSUpgradeable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n\\r\\n    /// @notice Total shares issued\\r\\n    uint256 public totalShares;\\r\\n\\r\\n    /// @notice Mapping of user addresses to their shares\\r\\n    mapping(address => uint256) public shares;\\r\\n\\r\\n    /// @notice Emitted when user stakes tokens\\r\\n    /// @param user Address of staker\\r\\n    /// @param tokenAmount Amount of tokens staked\\r\\n    /// @param sharesIssued Amount of shares received\\r\\n    event Staked(address indexed user, uint256 tokenAmount, uint256 sharesIssued);\\r\\n\\r\\n    /// @notice Emitted when user unstakes tokens\\r\\n    /// @param user Address of unstaker\\r\\n    /// @param tokenAmount Amount of tokens received\\r\\n    /// @param sharesBurned Amount of shares burned\\r\\n    event Unstaked(address indexed user, uint256 tokenAmount, uint256 sharesBurned);\\r\\n\\r\\n    /// @notice Constructor that disables initializers\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    /// @param initialAddressBook Address of AddressBook contract\\r\\n    function initialize(address initialAddressBook) external initializer {\\r\\n        __UUPSUpgradeable_init_unchained();\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate shares for given token amount\\r\\n    /// @param amount Amount of tokens\\r\\n    /// @return Number of shares to issue\\r\\n    function calculateShares(uint256 amount) public view returns (uint256) {\\r\\n        IERC20 token = IERC20(addressBook.platformToken());\\r\\n        uint256 totalTokens = token.balanceOf(address(this));\\r\\n        \\r\\n        if (totalShares == 0 || totalTokens == 0) {\\r\\n            return amount;\\r\\n        }\\r\\n        \\r\\n        return (amount * totalShares) / totalTokens;\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate tokens for given shares amount\\r\\n    /// @param shareAmount Amount of shares\\r\\n    /// @return Number of tokens to return\\r\\n    function calculateTokens(uint256 shareAmount) public view returns (uint256) {\\r\\n        IERC20 token = IERC20(addressBook.platformToken());\\r\\n        uint256 totalTokens = token.balanceOf(address(this));\\r\\n        \\r\\n        return (shareAmount * totalTokens) / totalShares;\\r\\n    }\\r\\n\\r\\n    /// @notice Stakes tokens into the contract\\r\\n    /// @param amount Amount of tokens to stake\\r\\n    function stake(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\r\\n        \\r\\n        uint256 sharesToIssue = calculateShares(amount);\\r\\n        require(sharesToIssue > 0, \\\"No shares to issue\\\");\\r\\n\\r\\n        totalShares += sharesToIssue;\\r\\n        shares[msg.sender] += sharesToIssue;\\r\\n\\r\\n        IERC20(addressBook.platformToken()).safeTransferFrom(msg.sender, address(this), amount);\\r\\n        emit Staked(msg.sender, amount, sharesToIssue);\\r\\n    }\\r\\n\\r\\n    /// @notice Unstakes shares from the contract\\r\\n    /// @param shareAmount Amount of shares to unstake\\r\\n    function unstake(uint256 shareAmount) external {\\r\\n        require(shareAmount > 0, \\\"Cannot unstake 0\\\");\\r\\n        require(shares[msg.sender] >= shareAmount, \\\"Insufficient shares\\\");\\r\\n\\r\\n        uint256 tokensToReturn = calculateTokens(shareAmount);\\r\\n        require(tokensToReturn > 0, \\\"No tokens to return\\\");\\r\\n\\r\\n        totalShares -= shareAmount;\\r\\n        shares[msg.sender] -= shareAmount;\\r\\n\\r\\n        IERC20(addressBook.platformToken()).safeTransfer(msg.sender, tokensToReturn);\\r\\n        emit Unstaked(msg.sender, tokensToReturn, shareAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice Authorizes upgrade\\r\\n    /// @param newImplementation Address of new implementation\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf4a0abc3bc756aaeb9ef01f560c18d9bbc3413d81cb933f4d71f12833e933fb7\",\"license\":\"MIT\"},\"contracts/platform/PlatformStakingAirdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\n\\r\\n/// @title Platform Staking Contract with Lock Periods\\r\\n/// @notice Allows users to stake platform tokens for fixed periods\\r\\ncontract PlatformStakingAirdrop is UUPSUpgradeable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Address book contract reference \\r\\n    AddressBook public addressBook;\\r\\n\\r\\n    /// @notice Available staking periods in months\\r\\n    uint256 constant PERIOD_1_MONTH = 30 days;\\r\\n    uint256 constant PERIOD_3_MONTHS = 90 days;\\r\\n    uint256 constant PERIOD_6_MONTHS = 180 days;\\r\\n    uint256 constant PERIOD_12_MONTHS = 360 days;\\r\\n\\r\\n    /// @notice Staking information\\r\\n    struct Stake {\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        bool withdrawn;\\r\\n    }\\r\\n\\r\\n    /// @notice Mapping from user address to their stakes array\\r\\n    mapping(address => Stake[]) public userStakes;\\r\\n\\r\\n    /// @notice Emitted when tokens are staked\\r\\n    /// @param user Address of staker\\r\\n    /// @param amount Amount of tokens staked\\r\\n    /// @param period Lock period in seconds\\r\\n    /// @param index Index in user's stakes array\\r\\n    event Staked(address indexed user, uint256 amount, uint256 period, uint256 index);\\r\\n\\r\\n    /// @notice Emitted when tokens are unstaked\\r\\n    /// @param user Address of unstaker\\r\\n    /// @param amount Amount of tokens unstaked\\r\\n    /// @param index Index of unstaked position\\r\\n    event Unstaked(address indexed user, uint256 amount, uint256 index);\\r\\n\\r\\n    /// @notice Constructor that disables initializers\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    /// @param initialAddressBook Address of AddressBook contract\\r\\n    function initialize(address initialAddressBook) external initializer {\\r\\n        __UUPSUpgradeable_init_unchained();\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n    }\\r\\n\\r\\n    /// @notice Stakes tokens for a fixed period\\r\\n    /// @param amount Amount to stake\\r\\n    /// @param months Lock period in months (1,3,6,12)\\r\\n    /// @return index Index of the new stake in user's array\\r\\n    function stake(uint256 amount, uint256 months) external returns (uint256 index) {\\r\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\r\\n        \\r\\n        uint256 period = _getPeriod(months);\\r\\n        require(period > 0, \\\"Invalid period\\\");\\r\\n\\r\\n        index = userStakes[msg.sender].length;\\r\\n\\r\\n        userStakes[msg.sender].push(Stake({\\r\\n            amount: amount,\\r\\n            startTime: block.timestamp,\\r\\n            endTime: block.timestamp + period,\\r\\n            withdrawn: false\\r\\n        }));\\r\\n\\r\\n        IERC20(addressBook.platformToken()).safeTransferFrom(msg.sender, address(this), amount);\\r\\n        \\r\\n        emit Staked(msg.sender, amount, period, index);\\r\\n    }\\r\\n\\r\\n    /// @notice Unstakes tokens after lock period\\r\\n    /// @param index Index of stake to unstake\\r\\n    function unstake(uint256 index) external {\\r\\n        require(index < userStakes[msg.sender].length, \\\"Invalid index\\\");\\r\\n        \\r\\n        Stake storage userStake = userStakes[msg.sender][index];\\r\\n        \\r\\n        require(!userStake.withdrawn, \\\"Already withdrawn\\\");\\r\\n        require(block.timestamp >= userStake.endTime, \\\"Still locked\\\");\\r\\n\\r\\n        userStake.withdrawn = true;\\r\\n\\r\\n        IERC20(addressBook.platformToken()).safeTransfer(msg.sender, userStake.amount);\\r\\n        \\r\\n        emit Unstaked(msg.sender, userStake.amount, index);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets period duration from months\\r\\n    /// @param months Number of months (1,3,6,12)\\r\\n    /// @return Period duration in seconds\\r\\n    function _getPeriod(uint256 months) internal pure returns (uint256) {\\r\\n        if (months == 1) return PERIOD_1_MONTH;\\r\\n        if (months == 3) return PERIOD_3_MONTHS;\\r\\n        if (months == 6) return PERIOD_6_MONTHS;\\r\\n        if (months == 12) return PERIOD_12_MONTHS;\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /// @notice View function to get all stakes for a user\\r\\n    /// @param user Address to check\\r\\n    /// @return stakes Array of user's stakes\\r\\n    function getUserStakes(address user) external view returns (Stake[] memory) {\\r\\n        return userStakes[user];\\r\\n    }\\r\\n\\r\\n    /// @notice Authorizes upgrade\\r\\n    /// @param newImplementation Address of new implementation\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbc784ee5e56af44801baf432115906e0caf432c71fd1867ece568e78bcd52603\",\"license\":\"MIT\"},\"contracts/platform/PlatformToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\n\\r\\n/// @title Platform Token Contract\\r\\n/// @notice ERC20 token with batch mint functionality\\r\\ncontract PlatformToken is UUPSUpgradeable, ERC20Upgradeable {\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n\\r\\n    /// @notice Emitted when tokens are batch minted\\r\\n    /// @param operator Address performing the mint\\r\\n    /// @param recipients Array of recipient addresses\\r\\n    /// @param amounts Array of amounts minted\\r\\n    event BatchMint(address indexed operator, address[] recipients, uint256[] amounts);\\r\\n\\r\\n    /// @notice Constructor that disables initializers\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    /// @dev Mints tokens to multiple addresses\\r\\n    /// @param initialAddressBook Address of AddressBook contract\\r\\n    /// @param initialName Token name\\r\\n    /// @param initialSymbol Token symbol\\r\\n    /// @param initialHolders Array of addresses to receive tokens\\r\\n    /// @param initilaAmounts Array of amounts to mint\\r\\n    function initialize(\\r\\n        address initialAddressBook,\\r\\n        string calldata initialName,\\r\\n        string calldata initialSymbol,\\r\\n        address[] calldata initialHolders, \\r\\n        uint256[] calldata initilaAmounts\\r\\n    ) external initializer {\\r\\n        __UUPSUpgradeable_init_unchained();\\r\\n        __ERC20_init_unchained(initialName, initialSymbol);\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n\\r\\n        require(initialHolders.length == initilaAmounts.length, \\\"Arrays length mismatch\\\");\\r\\n        require(initialHolders.length > 0, \\\"Empty arrays\\\");\\r\\n\\r\\n        for(uint256 i = 0; i < initialHolders.length; i++) {\\r\\n            require(initialHolders[i] != address(0), \\\"Zero address recipient\\\");\\r\\n            _mint(initialHolders[i], initilaAmounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Override transfer function to emit additional event\\r\\n    function _update(address from, address to, uint256 amount) internal virtual override {\\r\\n        super._update(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Authorizes upgrade\\r\\n    /// @param newImplementation Address of new implementation\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xed262298bb6fd9dd6cd45e892e83f1d265e7b8f74052a54521e0d1cb6466e1c0\",\"license\":\"MIT\"},\"contracts/platform/ReferralTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\n\\r\\n/// @title Referral Treasury Contract\\r\\n/// @notice Stores tokens and allows withdrawal with backend signature\\r\\ncontract ReferralTreasury is UUPSUpgradeable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n\\r\\n    /// @notice Mapping to track used signatures\\r\\n    mapping(bytes32 => bool) public usedSignatures;\\r\\n\\r\\n    /// @notice Emitted when tokens are withdrawn\\r\\n    /// @param user Address of withdrawer\\r\\n    /// @param token Token address\\r\\n    /// @param amount Amount withdrawn\\r\\n    event Withdrawn(address indexed user, address indexed token, uint256 amount);\\r\\n\\r\\n    /// @notice Constructor that disables initializers\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    /// @param initialAddressBook Address of AddressBook contract\\r\\n    function initialize(address initialAddressBook) external initializer {\\r\\n        __UUPSUpgradeable_init_unchained();\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n    }\\r\\n\\r\\n    // /// @notice Withdraws tokens with backend signature verification\\r\\n    // /// @param token Token address to withdraw\\r\\n    // /// @param amount Amount to withdraw\\r\\n    // /// @param deadline Timestamp until which signature is valid\\r\\n    // /// @param signature Backend signature\\r\\n    // function withdraw(\\r\\n    //     address token,\\r\\n    //     uint256 amount,\\r\\n    //     uint256 deadline,\\r\\n    //     bytes calldata signature\\r\\n    // ) external {\\r\\n    //     require(block.timestamp <= deadline, \\\"Signature expired\\\");\\r\\n\\r\\n    //     bytes32 messageHash = MessageHashUtils.toEthSignedMessageHash(\\r\\n    //         keccak256(\\r\\n    //             abi.encodePacked(\\r\\n    //                 block.chainid,\\r\\n    //                 address(this),\\r\\n    //                 msg.sender,\\r\\n    //                 \\\"withdraw\\\",\\r\\n    //                 token,\\r\\n    //                 amount,\\r\\n    //                 deadline\\r\\n    //             )\\r\\n    //         )\\r\\n    //     );\\r\\n\\r\\n    //     require(!usedSignatures[messageHash], \\\"Signature already used\\\");\\r\\n    //     require(\\r\\n    //         SignatureChecker.isValidSignatureNow(addressBook.backend(), messageHash, signature),\\r\\n    //         \\\"Backend signature check failed\\\"\\r\\n    //     );\\r\\n\\r\\n    //     usedSignatures[messageHash] = true;\\r\\n\\r\\n    //     IERC20(token).safeTransfer(msg.sender, amount);\\r\\n        \\r\\n    //     emit Withdrawn(msg.sender, token, amount);\\r\\n    // }\\r\\n\\r\\n    /// @notice Emergency withdrawal of stuck tokens by governance\\r\\n    /// @param token Token address to withdraw\\r\\n    /// @param to Address to send tokens to\\r\\n    /// @param amount Amount to withdraw\\r\\n    function emergencyWithdraw(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        IERC20(token).safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Authorizes upgrade\\r\\n    /// @param newImplementation Address of new implementation\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4dd3070add3655cd9e44bfb58a35bf6fc9126f48d688a83fc0ba02dc043b3281\",\"license\":\"MIT\"},\"contracts/rwa/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport { ERC1155Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\r\\nimport { ERC1967Proxy } from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\nimport { MessageHashUtils } from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\r\\nimport { SignatureChecker } from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\nimport { RWA } from \\\"./RWA.sol\\\";\\r\\nimport { Config } from \\\"../system/Config.sol\\\";\\r\\nimport { Pool } from \\\"./Pool.sol\\\";\\r\\nimport { UpgradeableContract } from \\\"../utils/UpgradeableContract.sol\\\";\\r\\n\\r\\ncontract Factory is UpgradeableContract, ReentrancyGuardUpgradeable {\\r\\n    AddressBook public addressBook;\\r\\n\\r\\n    mapping(bytes32 => bool) public usedSignatures;\\r\\n    mapping(string => bool) public deployedEntities;\\r\\n\\r\\n    function uniqueContractId() public pure override returns (bytes32) {\\r\\n        return keccak256(\\\"Factory\\\");\\r\\n    }\\r\\n\\r\\n    function implementationVersion() public pure override returns (uint256) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function _verifyAuthorizeUpgradeRole() internal view override {\\r\\n        addressBook.requireTimelock(msg.sender);\\r\\n    }\\r\\n\\r\\n    constructor() UpgradeableContract() {}\\r\\n\\r\\n    function initialize(address initialAddressBook) external initializer {\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n\\r\\n        __UpgradeableContract_init();\\r\\n        __ReentrancyGuard_init();\\r\\n    }\\r\\n\\r\\n    function deployRWA(\\r\\n        uint256 createRWAFee,\\r\\n        string calldata entityId,\\r\\n        string calldata entityOwnerId,\\r\\n        string calldata entityOwnerType,\\r\\n        address owner,\\r\\n        address[] calldata signers,\\r\\n        bytes[] calldata signatures,\\r\\n        uint256 expired\\r\\n    ) external nonReentrant returns (address) {\\r\\n        require(block.timestamp <= expired, \\\"Request has expired\\\");\\r\\n        require(!deployedEntities[entityId], \\\"Entity already deployed\\\");\\r\\n\\r\\n        AddressBook _addressBook = addressBook;\\r\\n        Config config = _addressBook.config();\\r\\n\\r\\n        require(signers.length == signatures.length, \\\"Signers and signatures length mismatch\\\");\\r\\n        require(signers.length >= config.minSignersRequired(), \\\"Insufficient signatures\\\");\\r\\n\\r\\n        require(\\r\\n            createRWAFee >= config.createRWAFeeMin() && createRWAFee <= config.createRWAFeeMax(),\\r\\n            \\\"RWA fee out of allowed range\\\"\\r\\n        );\\r\\n\\r\\n        config.holdToken().transferFrom(\\r\\n            msg.sender,\\r\\n            address(_addressBook.treasury()),\\r\\n            createRWAFee * 10 ** IERC20Metadata(address(config.holdToken())).decimals()\\r\\n        );\\r\\n\\r\\n        bytes32 messageHash = MessageHashUtils.toEthSignedMessageHash(\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            block.chainid,\\r\\n                            address(this),\\r\\n                            msg.sender,\\r\\n                            \\\"deployRWA\\\",\\r\\n                            createRWAFee,\\r\\n                            entityId,\\r\\n                            entityOwnerId,\\r\\n                            entityOwnerType,\\r\\n                            owner\\r\\n                        )\\r\\n                    ),\\r\\n                    expired\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        _validateSignatures(signers, signatures, messageHash);\\r\\n\\r\\n        address proxy = address(new ERC1967Proxy(_addressBook.rwaImplementation(), \\\"\\\"));\\r\\n        RWA rwa = RWA(proxy);\\r\\n        _addressBook.addRWA(rwa);\\r\\n        rwa.initialize(address(_addressBook), owner, entityId, entityOwnerId, entityOwnerType);\\r\\n\\r\\n        return proxy;\\r\\n    }\\r\\n\\r\\n    function deployPool(\\r\\n        uint256 createPoolFeeRatio,\\r\\n        string calldata entityId,\\r\\n        RWA rwa,\\r\\n        uint256 expectedHoldAmount,\\r\\n        uint256 expectedRwaAmount,\\r\\n        uint256 priceImpactPercent,\\r\\n        uint256 rewardPercent,\\r\\n        uint256 entryPeriodStart,\\r\\n        uint256 entryPeriodExpired,\\r\\n        uint256 completionPeriodExpired,\\r\\n        uint256 entryFeePercent,\\r\\n        uint256 exitFeePercent,\\r\\n        bool fixedSell,\\r\\n        bool allowEntryBurn,\\r\\n        bool awaitCompletionExpired,\\r\\n        bool floatingOutTranchesTimestamps,\\r\\n        uint256[] calldata outgoingTranches,\\r\\n        uint256[] calldata outgoingTranchTimestamps,\\r\\n        uint256[] calldata incomingTranches,\\r\\n        uint256[] calldata incomingTrancheExpired,\\r\\n        address[] calldata signers,\\r\\n        bytes[] calldata signatures,\\r\\n        uint256 expired\\r\\n    ) external nonReentrant returns (address) {\\r\\n        require(block.timestamp <= expired, \\\"Request has expired\\\");\\r\\n        require(!deployedEntities[entityId], \\\"Entity already deployed\\\");\\r\\n\\r\\n        AddressBook _addressBook = addressBook;\\r\\n        Config config = _addressBook.config();\\r\\n\\r\\n        require(signers.length == signatures.length, \\\"Signers and signatures length mismatch\\\");\\r\\n        require(signers.length >= config.minSignersRequired(), \\\"Insufficient signatures\\\");\\r\\n\\r\\n        require(_addressBook.isRWA(address(rwa)), \\\"RWA not registered in system\\\");\\r\\n\\r\\n        require(\\r\\n            createPoolFeeRatio >= config.createPoolFeeRatioMin() &&\\r\\n                createPoolFeeRatio <= config.createPoolFeeRatioMax(),\\r\\n            \\\"Pool fee ratio out of allowed range\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            expectedHoldAmount >= config.expectedHoldAmountMin() &&\\r\\n                expectedHoldAmount <= config.expectedHoldAmountMax(),\\r\\n            \\\"Factory: expected HOLD amount out of allowed range\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            expectedRwaAmount >= config.expectedRwaAmountMin() &&\\r\\n                expectedRwaAmount <= config.expectedRwaAmountMax(),\\r\\n            \\\"Factory: expected RWA amount out of allowed range\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            rewardPercent >= config.rewardPercentMin() &&\\r\\n                rewardPercent <= config.rewardPercentMax(),\\r\\n            \\\"Factory: reward percentage out of allowed range\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            entryFeePercent >= config.entryFeePercentMin() &&\\r\\n                entryFeePercent <= config.entryFeePercentMax(),\\r\\n            \\\"Factory: entry fee out of allowed range\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            exitFeePercent >= config.exitFeePercentMin() &&\\r\\n                exitFeePercent <= config.exitFeePercentMax(),\\r\\n            \\\"Factory: exit fee out of allowed range\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            entryPeriodStart > block.timestamp - config.maxEntryStartPastOffset() &&\\r\\n                entryPeriodStart < block.timestamp + config.maxEntryStartFutureOffset(),\\r\\n            \\\"Factory: entry period start out of allowed range\\\"\\r\\n        );\\r\\n        require(\\r\\n            outgoingTranches.length >= config.outgoingTranchesMinCount() &&\\r\\n                outgoingTranches.length <= config.outgoingTranchesMaxCount(),\\r\\n            \\\"Factory: invalid outgoing tranches count\\\"\\r\\n        );\\r\\n        require(\\r\\n            incomingTranches.length >= config.incomingTranchesMinCount() &&\\r\\n                incomingTranches.length <= config.incomingTranchesMaxCount(),\\r\\n            \\\"Factory: invalid incoming tranches count\\\"\\r\\n        );\\r\\n        require(\\r\\n            outgoingTranches.length == outgoingTranchTimestamps.length,\\r\\n            \\\"Factory: outgoing tranche arrays length mismatch\\\"\\r\\n        );\\r\\n        require(\\r\\n            incomingTranches.length == incomingTrancheExpired.length,\\r\\n            \\\"Factory: incoming tranche arrays length mismatch\\\"\\r\\n        );\\r\\n\\r\\n        uint256 entryPeriodDuration = entryPeriodExpired - entryPeriodStart;\\r\\n        require(\\r\\n            entryPeriodDuration >= config.entryPeriodMinDuration() &&\\r\\n                entryPeriodDuration <= config.entryPeriodMaxDuration(),\\r\\n            \\\"Factory: entry period duration out of allowed range\\\"\\r\\n        );\\r\\n\\r\\n        uint256 completionPeriodDuration = completionPeriodExpired - entryPeriodExpired;\\r\\n        require(\\r\\n            completionPeriodDuration >= config.completionPeriodMinDuration() &&\\r\\n                completionPeriodDuration <= config.completionPeriodMaxDuration(),\\r\\n            \\\"Factory: completion period duration out of allowed range\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            outgoingTranchTimestamps[0] >= entryPeriodExpired,\\r\\n            \\\"Factory: first outgoing tranche must be after entry period\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            incomingTrancheExpired[incomingTranches.length - 1] <= completionPeriodExpired,\\r\\n            \\\"Factory: last incoming tranche must be before completion period\\\"\\r\\n        );\\r\\n\\r\\n        uint256 totalOutgoing = 0;\\r\\n        for (uint256 i = 0; i < outgoingTranches.length; i++) {\\r\\n            // Check tranche amount\\r\\n            require(outgoingTranches[i] > 0, \\\"Factory: zero tranche amount\\\");\\r\\n\\r\\n            // Check tranche percent\\r\\n            uint256 tranchePercent = (outgoingTranches[i] * 10000) / expectedHoldAmount;\\r\\n            require(\\r\\n                tranchePercent >= config.outgoingTranchesMinPercent() &&\\r\\n                    tranchePercent <= config.outgoingTranchesMaxPercent(),\\r\\n                \\\"Factory: outgoing tranche percent out of allowed range\\\"\\r\\n            );\\r\\n\\r\\n            // Check interval between tranches\\r\\n            if (i > 0) {\\r\\n                require(\\r\\n                    outgoingTranchTimestamps[i] >=\\r\\n                        outgoingTranchTimestamps[i - 1] + config.outgoingTranchesMinInterval(),\\r\\n                    \\\"Factory: outgoing tranche interval too small\\\"\\r\\n                );\\r\\n            }\\r\\n\\r\\n            totalOutgoing += outgoingTranches[i];\\r\\n        }\\r\\n        require(\\r\\n            totalOutgoing == expectedHoldAmount,\\r\\n            \\\"Factory: outgoing tranches must equal expected amount\\\"\\r\\n        );\\r\\n\\r\\n        // Validate incoming tranches\\r\\n        uint256 totalIncoming = 0;\\r\\n        uint256 totalExpectedIncoming = expectedHoldAmount +\\r\\n            (expectedHoldAmount * rewardPercent) /\\r\\n            10000;\\r\\n\\r\\n        for (uint256 i = 0; i < incomingTranches.length; i++) {\\r\\n            // Check tranche amount\\r\\n            require(incomingTranches[i] > 0, \\\"Factory: zero tranche amount\\\");\\r\\n\\r\\n            // Check tranche percent\\r\\n            uint256 tranchePercent = (incomingTranches[i] * 10000) / totalExpectedIncoming;\\r\\n            require(\\r\\n                tranchePercent >= config.incomingTranchesMinPercent() &&\\r\\n                    tranchePercent <= config.incomingTranchesMaxPercent(),\\r\\n                \\\"Factory: incoming tranche percent out of allowed range\\\"\\r\\n            );\\r\\n\\r\\n            // Check interval between tranches\\r\\n            if (i > 0) {\\r\\n                require(\\r\\n                    incomingTrancheExpired[i] >=\\r\\n                        incomingTrancheExpired[i - 1] + config.incomingTranchesMinInterval(),\\r\\n                    \\\"Factory: incoming tranche interval too small\\\"\\r\\n                );\\r\\n            }\\r\\n\\r\\n            totalIncoming += incomingTranches[i];\\r\\n        }\\r\\n        require(\\r\\n            totalIncoming == totalExpectedIncoming,\\r\\n            \\\"Factory: incoming tranches must equal total expected amount\\\"\\r\\n        );\\r\\n\\r\\n        IERC20 holdToken = config.holdToken();\\r\\n        holdToken.transferFrom(\\r\\n            msg.sender,\\r\\n            address(_addressBook.treasury()),\\r\\n            (expectedHoldAmount * createPoolFeeRatio) / 10000\\r\\n        );\\r\\n\\r\\n        bytes32 messageHash = MessageHashUtils.toEthSignedMessageHash(\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            block.chainid,\\r\\n                            address(this),\\r\\n                            msg.sender,\\r\\n                            \\\"deployPool\\\",\\r\\n                            createPoolFeeRatio,\\r\\n                            entityId,\\r\\n                            address(rwa),\\r\\n                            expectedHoldAmount,\\r\\n                            expectedRwaAmount,\\r\\n                            priceImpactPercent,\\r\\n                            rewardPercent,\\r\\n                            entryPeriodStart,\\r\\n                            entryPeriodExpired,\\r\\n                            completionPeriodExpired,\\r\\n                            entryFeePercent,\\r\\n                            exitFeePercent,\\r\\n                            fixedSell,\\r\\n                            allowEntryBurn,\\r\\n                            awaitCompletionExpired,\\r\\n                            floatingOutTranchesTimestamps,\\r\\n                            outgoingTranches,\\r\\n                            outgoingTranchTimestamps,\\r\\n                            incomingTranches,\\r\\n                            incomingTrancheExpired\\r\\n                        )\\r\\n                    ),\\r\\n                    expired\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        _validateSignatures(signers, signatures, messageHash);\\r\\n\\r\\n        address implementation = _addressBook.poolImplementation();\\r\\n        require(implementation != address(0), \\\"Pool implementation not set\\\");\\r\\n\\r\\n        address proxy = address(new ERC1967Proxy(implementation, \\\"\\\"));\\r\\n        uint256 rwaId = rwa.createToken(proxy);\\r\\n\\r\\n        _addressBook.addPool(Pool(proxy));\\r\\n\\r\\n        // Calculate values\\r\\n        uint256 liquidityCoefficient = config.getLiquidityCoefficient(priceImpactPercent);\\r\\n        uint256 expectedBonusAmount = (expectedHoldAmount * rewardPercent) / 10000;\\r\\n\\r\\n        Pool(proxy).initialize(\\r\\n            address(config.holdToken()),\\r\\n            address(rwa),\\r\\n            address(_addressBook),\\r\\n            rwaId,\\r\\n            entityId,\\r\\n            rwa.entityOwnerId(),\\r\\n            rwa.entityOwnerType(),\\r\\n            rwa.owner(),\\r\\n            expectedHoldAmount,\\r\\n            expectedRwaAmount,\\r\\n            priceImpactPercent,\\r\\n            liquidityCoefficient,\\r\\n            entryFeePercent,\\r\\n            exitFeePercent,\\r\\n            entryPeriodStart,\\r\\n            entryPeriodExpired,\\r\\n            completionPeriodExpired,\\r\\n            rewardPercent,\\r\\n            expectedBonusAmount,\\r\\n            fixedSell,\\r\\n            allowEntryBurn,\\r\\n            awaitCompletionExpired,\\r\\n            floatingOutTranchesTimestamps,\\r\\n            outgoingTranches,\\r\\n            outgoingTranchTimestamps,\\r\\n            incomingTranches,\\r\\n            incomingTrancheExpired\\r\\n        );\\r\\n\\r\\n        deployedEntities[entityId] = true;\\r\\n        return proxy;\\r\\n    }\\r\\n\\r\\n    function _validateSignatures(\\r\\n        address[] calldata signers,\\r\\n        bytes[] calldata signatures,\\r\\n        bytes32 messageHash\\r\\n    ) internal {\\r\\n        for (uint256 i = 0; i < signers.length; i++) {\\r\\n            bytes32 signatureHash = keccak256(signatures[i]);\\r\\n            require(!usedSignatures[signatureHash], \\\"Duplicate signature\\\");\\r\\n            require(addressBook.signers(signers[i]), \\\"Not an authorized signer\\\");\\r\\n            require(\\r\\n                SignatureChecker.isValidSignatureNow(signers[i], messageHash, signatures[i]),\\r\\n                \\\"Invalid signature\\\"\\r\\n            );\\r\\n            usedSignatures[signatureHash] = true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x91d7c5c3b3975f3714f157d04ada7ca296fd8a4f2c4ca513b9d55dee00319181\",\"license\":\"MIT\"},\"contracts/rwa/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { RWA } from \\\"./RWA.sol\\\";\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\nimport { Config } from \\\"../system/Config.sol\\\";\\r\\nimport { EventEmitter } from \\\"../system/EventEmitter.sol\\\";\\r\\nimport { UpgradeableContract } from \\\"../utils/UpgradeableContract.sol\\\";\\r\\n\\r\\ncontract Pool is UpgradeableContract, ReentrancyGuardUpgradeable {\\r\\n    // --- Static Configuration Parameters ---\\r\\n    // Variables set during initialization and then immutable.\\r\\n\\r\\n    /// @notice Price impact percent used for AMM calculations\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    uint256 public priceImpactPercent;\\r\\n\\r\\n    /// @notice Liquidity coefficient used for AMM calculations\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    uint256 public liquidityCoefficient;\\r\\n\\r\\n    /// @notice HOLD token contract\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    IERC20 public holdToken;\\r\\n\\r\\n    /// @notice RWA token contract\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    RWA public rwaToken;\\r\\n\\r\\n    /// @notice Address book contract\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    AddressBook public addressBook;\\r\\n\\r\\n    /// @notice RWA token ID used in this pool\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    uint256 public tokenId;\\r\\n\\r\\n    /// @notice Entity ID in the database\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    string public entityId;\\r\\n\\r\\n    /// @notice Entity owner ID in the database\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    string public entityOwnerId;\\r\\n\\r\\n    /// @notice Entity owner type in the database\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    string public entityOwnerType;\\r\\n\\r\\n    /// @notice Owner address\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    address public owner;\\r\\n\\r\\n    /// @notice Expected amount in HOLD tokens for program participation\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    uint256 public expectedHoldAmount;\\r\\n\\r\\n    /// @notice Expected amount of RWA tokens for the program\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    uint256 public expectedRwaAmount;\\r\\n\\r\\n    /// @notice Expected bonus amount in HOLD tokens\\r\\n    /// @dev Set during initialization (calculated) and then immutable.\\r\\n    uint256 public expectedBonusAmount;\\r\\n\\r\\n    /// @notice Reward percentage for calculating bonus (in basis points)\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    uint256 public rewardPercent;\\r\\n\\r\\n    /// @notice If true, bonuses are available after completionExpired. If false, after 1 day since full return\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    bool public awaitCompletionExpired;\\r\\n\\r\\n    /// @notice If true, outgoing tranche timestamps will be adjusted if target is reached early\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    bool public floatingOutTranchesTimestamps;\\r\\n\\r\\n    /// @notice Flag indicating if RWA amount is fixed\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    bool public fixedSell;\\r\\n\\r\\n    /// @notice Flag indicating if burning is allowed during entry period\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    bool public allowEntryBurn;\\r\\n\\r\\n    /// @notice Program entry period start timestamp\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    uint256 public entryPeriodStart;\\r\\n\\r\\n    /// @notice Program entry period expiration timestamp\\r\\n    /// @dev Set during initialization (derived) and then immutable.\\r\\n    uint256 public entryPeriodExpired;\\r\\n\\r\\n    /// @notice Program completion period expiration timestamp\\r\\n    /// @dev Set during initialization (derived) and then immutable.\\r\\n    uint256 public completionPeriodExpired;\\r\\n\\r\\n    /// @notice Constant product for AMM calculations (k = virtualHoldReserve * virtualRwaReserve)\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    uint256 public k;\\r\\n\\r\\n    /// @notice Fee percentage charged when entering the pool (in basis points)\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    uint256 public entryFeePercent;\\r\\n\\r\\n    /// @notice Fee percentage charged when exiting the pool (in basis points)\\r\\n    /// @dev Set during initialization and then immutable.\\r\\n    uint256 public exitFeePercent;\\r\\n\\r\\n    /// @notice Array of outgoing tranche amounts\\r\\n    /// @dev Set during initialization and then immutable (content of array is fixed).\\r\\n    uint256[] public outgoingTranches;\\r\\n\\r\\n    /// @notice Array of outgoing tranche timestamps\\r\\n    /// @dev Set during initialization and then immutable (content of array is fixed).\\r\\n    uint256[] public outgoingTranchTimestamps;\\r\\n\\r\\n    /// @notice Array of incoming tranche amounts\\r\\n    /// @dev Set during initialization and then immutable (content of array is fixed).\\r\\n    uint256[] public incomingTranches;\\r\\n\\r\\n    /// @notice Array of incoming tranche expiration timestamps\\r\\n    /// @dev Set during initialization and then immutable (content of array is fixed).\\r\\n    uint256[] public incomingTrancheExpired;\\r\\n\\r\\n    // --- Dynamic State Variables ---\\r\\n    // Variables that change during the lifecycle of the pool.\\r\\n\\r\\n    /// @notice Offset applied to outgoing tranche timestamps if target is reached early and floatingOutTranchesTimestamps is true\\r\\n    uint256 public floatingTimestampOffset;\\r\\n\\r\\n    /// @notice Emergency pause flag\\r\\n    bool public paused;\\r\\n\\r\\n    /// @notice Total amount of claimed HOLD tokens\\r\\n    uint256 public totalClaimedAmount;\\r\\n\\r\\n    /// @notice Total amount of returned HOLD tokens\\r\\n    uint256 public totalReturnedAmount;\\r\\n\\r\\n    /// @notice Amount of bonus HOLD tokens awaiting claim\\r\\n    uint256 public awaitingBonusAmount;\\r\\n\\r\\n    /// @notice Flag indicating if target amount has been reached\\r\\n    bool public isTargetReached;\\r\\n\\r\\n    /// @notice Flag indicating if full return has been completed\\r\\n    bool public isFullyReturned;\\r\\n\\r\\n    /// @notice Timestamp when funds were fully returned\\r\\n    uint256 public fullReturnTimestamp;\\r\\n\\r\\n    /// @notice Amount of RWA tokens awaiting return\\r\\n    uint256 public awaitingRwaAmount;\\r\\n\\r\\n    /// @notice Amount of HOLD tokens available for outgoing tranches\\r\\n    uint256 public outgoingTranchesBalance;\\r\\n\\r\\n    /// @notice Real amount of HOLD tokens in pool\\r\\n    uint256 public realHoldReserve;\\r\\n\\r\\n    /// @notice Virtual amount of HOLD tokens in pool\\r\\n    uint256 public virtualHoldReserve;\\r\\n\\r\\n    /// @notice Virtual amount of RWA tokens in pool\\r\\n    uint256 public virtualRwaReserve;\\r\\n\\r\\n    /// @notice Array tracking claimed amounts for each outgoing tranche\\r\\n    uint256[] public outgoingTrancheStates;\\r\\n\\r\\n    /// @notice Array tracking returned amounts for each incoming tranche\\r\\n    uint256[] public incomingTrancheStates;\\r\\n\\r\\n    /// @notice Index of the last fully completed incoming tranche\\r\\n    uint256 public lastCompletedIncomingTranche;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() UpgradeableContract() {}\\r\\n\\r\\n    function initialize(\\r\\n        address _holdToken,\\r\\n        address _rwaToken,\\r\\n        address _addressBook,\\r\\n        uint256 _tokenId,\\r\\n        string memory _entityId,\\r\\n        string memory _entityOwnerId,\\r\\n        string memory _entityOwnerType,\\r\\n        address _owner,\\r\\n        uint256 _expectedHoldAmount,\\r\\n        uint256 _expectedRwaAmount,\\r\\n        uint256 _priceImpactPercent,\\r\\n        uint256 _liquidityCoefficient,\\r\\n        uint256 _entryFeePercent,\\r\\n        uint256 _exitFeePercent,\\r\\n        uint256 _entryPeriodStart,\\r\\n        uint256 _entryPeriodExpired,\\r\\n        uint256 _completionPeriodExpired,\\r\\n        uint256 _rewardPercent,\\r\\n        uint256 _expectedBonusAmount,\\r\\n        bool _fixedSell,\\r\\n        bool _allowEntryBurn,\\r\\n        bool _awaitCompletionExpired,\\r\\n        bool _floatingOutTranchesTimestamps,\\r\\n        uint256[] memory _outgoingTranches,\\r\\n        uint256[] memory _outgoingTranchTimestamps,\\r\\n        uint256[] memory _incomingTranches,\\r\\n        uint256[] memory _incomingTrancheExpired\\r\\n    ) external initializer {\\r\\n        addressBook = AddressBook(_addressBook);\\r\\n\\r\\n        __UpgradeableContract_init();\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n\\r\\n        priceImpactPercent = _priceImpactPercent;\\r\\n        liquidityCoefficient = _liquidityCoefficient;\\r\\n        entryPeriodStart = _entryPeriodStart;\\r\\n        entryPeriodExpired = _entryPeriodExpired;\\r\\n        completionPeriodExpired = _completionPeriodExpired;\\r\\n        holdToken = IERC20(_holdToken);\\r\\n        rwaToken = RWA(_rwaToken);\\r\\n        tokenId = _tokenId;\\r\\n        entityId = _entityId;\\r\\n        entityOwnerId = _entityOwnerId;\\r\\n        entityOwnerType = _entityOwnerType;\\r\\n        owner = _owner;\\r\\n        expectedHoldAmount = _expectedHoldAmount;\\r\\n        expectedRwaAmount = _expectedRwaAmount;\\r\\n        rewardPercent = _rewardPercent;\\r\\n        expectedBonusAmount = _expectedBonusAmount;\\r\\n\\r\\n        // Initialize state\\r\\n        isTargetReached = false;\\r\\n        isFullyReturned = false;\\r\\n        paused = false;\\r\\n        fixedSell = _fixedSell;\\r\\n        awaitCompletionExpired = _awaitCompletionExpired;\\r\\n        floatingOutTranchesTimestamps = _floatingOutTranchesTimestamps;\\r\\n        allowEntryBurn = _allowEntryBurn;\\r\\n        awaitingRwaAmount = 0;\\r\\n        floatingTimestampOffset = 0;\\r\\n\\r\\n        // Initialize reserves using liquidity coefficient\\r\\n        virtualHoldReserve = _expectedHoldAmount * _liquidityCoefficient;\\r\\n        virtualRwaReserve = _expectedRwaAmount * (_liquidityCoefficient + 1);\\r\\n        realHoldReserve = 0;\\r\\n        outgoingTranchesBalance = 0;\\r\\n        k = virtualHoldReserve * virtualRwaReserve;\\r\\n\\r\\n        // Initialize fee percentages\\r\\n        entryFeePercent = _entryFeePercent;\\r\\n        exitFeePercent = _exitFeePercent;\\r\\n\\r\\n        // Initialize tranches\\r\\n        outgoingTranches = _outgoingTranches;\\r\\n        outgoingTranchTimestamps = _outgoingTranchTimestamps;\\r\\n        outgoingTrancheStates = new uint256[](_outgoingTranches.length);\\r\\n\\r\\n        incomingTranches = _incomingTranches;\\r\\n        incomingTrancheExpired = _incomingTrancheExpired;\\r\\n        incomingTrancheStates = new uint256[](_incomingTranches.length);\\r\\n        lastCompletedIncomingTranche = 0;\\r\\n\\r\\n        // Initialize counters\\r\\n        totalClaimedAmount = 0;\\r\\n        totalReturnedAmount = 0;\\r\\n        awaitingBonusAmount = 0;\\r\\n\\r\\n        addressBook.eventEmitter().emitPool_Deployed(\\r\\n            awaitCompletionExpired,\\r\\n            floatingOutTranchesTimestamps,\\r\\n            address(holdToken),\\r\\n            address(rwaToken),\\r\\n            tokenId,\\r\\n            entityId,\\r\\n            entityOwnerId,\\r\\n            entityOwnerType,\\r\\n            owner,\\r\\n            expectedHoldAmount,\\r\\n            expectedRwaAmount,\\r\\n            expectedBonusAmount,\\r\\n            rewardPercent,\\r\\n            fixedSell,\\r\\n            allowEntryBurn,\\r\\n            entryPeriodStart,\\r\\n            entryPeriodExpired,\\r\\n            completionPeriodExpired,\\r\\n            k,\\r\\n            entryFeePercent,\\r\\n            exitFeePercent,\\r\\n            outgoingTranches,\\r\\n            outgoingTranchTimestamps,\\r\\n            incomingTranches,\\r\\n            incomingTrancheExpired\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Claims specified outgoing tranches\\r\\n    /// @param trancheIndexes Array of tranche indexes to claim\\r\\n    function claimOutgoingTranches(uint256[] calldata trancheIndexes) external nonReentrant {\\r\\n        require(!paused, \\\"Pool: paused\\\");\\r\\n        require(isTargetReached, \\\"Pool: target not reached\\\");\\r\\n        require(trancheIndexes.length > 0, \\\"Pool: no tranches specified\\\");\\r\\n        require(msg.sender == owner, \\\"Pool: only owner\\\");\\r\\n\\r\\n        uint256 totalAmountToClaimInBatch = 0;\\r\\n        uint256 numTranchesInCall = trancheIndexes.length;\\r\\n        uint256[] memory claimedAmountsForBatch = new uint256[](numTranchesInCall);\\r\\n\\r\\n        for (uint256 i = 0; i < numTranchesInCall; i++) {\\r\\n            uint256 index = trancheIndexes[i];\\r\\n            require(index < outgoingTranches.length, \\\"Pool: invalid tranche index\\\");\\r\\n\\r\\n            // Check if tranche is already claimed\\r\\n            require(outgoingTrancheStates[index] == 0, \\\"Pool: tranche already claimed\\\");\\r\\n\\r\\n            // Check if tranche time has come\\r\\n            uint256 effectiveTrancheTimestamp = outgoingTranchTimestamps[index];\\r\\n            if (floatingOutTranchesTimestamps && floatingTimestampOffset > 0) {\\r\\n                effectiveTrancheTimestamp -= floatingTimestampOffset;\\r\\n            }\\r\\n            require(\\r\\n                block.timestamp >= effectiveTrancheTimestamp,\\r\\n                \\\"Pool: tranche not yet available\\\"\\r\\n            );\\r\\n\\r\\n            uint256 amount = outgoingTranches[index];\\r\\n            totalAmountToClaimInBatch += amount;\\r\\n\\r\\n            // Mark tranche as claimed\\r\\n            outgoingTrancheStates[index] = amount;\\r\\n            claimedAmountsForBatch[i] = amount;\\r\\n            addressBook.eventEmitter().emitPool_OutgoingTrancheClaimed(msg.sender, index, amount);\\r\\n        }\\r\\n\\r\\n        require(totalAmountToClaimInBatch > 0, \\\"Pool: zero total amount to claim\\\");\\r\\n\\r\\n        // Update outgoing tranches balance\\r\\n        require(outgoingTranchesBalance >= totalAmountToClaimInBatch, \\\"Pool: insufficient balance\\\");\\r\\n        outgoingTranchesBalance -= totalAmountToClaimInBatch;\\r\\n\\r\\n        // Update total claimed amount\\r\\n        totalClaimedAmount += totalAmountToClaimInBatch;\\r\\n\\r\\n        // Transfer HOLD tokens\\r\\n        require(holdToken.transfer(msg.sender, totalAmountToClaimInBatch), \\\"Pool: transfer failed\\\");\\r\\n\\r\\n        addressBook.eventEmitter().emitPool_OutgoingClaimSummary(\\r\\n            totalClaimedAmount,\\r\\n            outgoingTranchesBalance\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Returns funds for incoming tranches\\r\\n    /// @param amount Amount to return\\r\\n    function returnIncomingTranche(uint256 amount) external nonReentrant {\\r\\n        require(!paused, \\\"Pool: paused\\\");\\r\\n        require(isTargetReached, \\\"Pool: target not reached\\\");\\r\\n        require(amount > 0, \\\"Pool: zero amount\\\");\\r\\n\\r\\n        uint256 remainingAmount = amount;\\r\\n        uint256 loopTrancheIndex = lastCompletedIncomingTranche; // Use a separate variable for the loop\\r\\n        uint256 totalAppliedToDebtInCall = 0;\\r\\n        uint256 totalAppliedToBonusInCall = 0;\\r\\n\\r\\n        while (remainingAmount > 0 && loopTrancheIndex < incomingTranches.length) {\\r\\n            uint256 trancheAmount = incomingTranches[loopTrancheIndex];\\r\\n            uint256 trancheAlreadyReturned = incomingTrancheStates[loopTrancheIndex];\\r\\n            uint256 trancheRemaining = trancheAmount - trancheAlreadyReturned;\\r\\n\\r\\n            if (trancheRemaining > 0) {\\r\\n                uint256 portionAmountApplied = remainingAmount > trancheRemaining\\r\\n                    ? trancheRemaining\\r\\n                    : remainingAmount;\\r\\n\\r\\n                incomingTrancheStates[loopTrancheIndex] += portionAmountApplied;\\r\\n                remainingAmount -= portionAmountApplied;\\r\\n\\r\\n                uint256 portionAppliedToDebt = 0;\\r\\n                uint256 portionAppliedToBonus = 0;\\r\\n\\r\\n                // Track if this amount goes to debt or bonus for this specific portion\\r\\n                // Consider the sum of (totalReturnedAmount state var + totalAppliedToDebtInCall so far) to check against expectedHoldAmount\\r\\n                if ((totalReturnedAmount + totalAppliedToDebtInCall) < expectedHoldAmount) {\\r\\n                    uint256 overallRemainingDebt = expectedHoldAmount -\\r\\n                        (totalReturnedAmount + totalAppliedToDebtInCall);\\r\\n                    uint256 toDebtForPortion = portionAmountApplied > overallRemainingDebt\\r\\n                        ? overallRemainingDebt\\r\\n                        : portionAmountApplied;\\r\\n                    portionAppliedToDebt = toDebtForPortion;\\r\\n                    portionAppliedToBonus = portionAmountApplied - toDebtForPortion;\\r\\n                } else {\\r\\n                    portionAppliedToBonus = portionAmountApplied;\\r\\n                }\\r\\n\\r\\n                totalAppliedToDebtInCall += portionAppliedToDebt;\\r\\n                totalAppliedToBonusInCall += portionAppliedToBonus;\\r\\n\\r\\n                bool isTrancheNowComplete = incomingTrancheStates[loopTrancheIndex] ==\\r\\n                    trancheAmount;\\r\\n                bool wasReturnedOnTime = block.timestamp <=\\r\\n                    incomingTrancheExpired[loopTrancheIndex];\\r\\n\\r\\n                addressBook.eventEmitter().emitPool_IncomingTrancheUpdate(\\r\\n                    msg.sender,\\r\\n                    loopTrancheIndex,\\r\\n                    portionAmountApplied,\\r\\n                    isTrancheNowComplete,\\r\\n                    wasReturnedOnTime\\r\\n                );\\r\\n\\r\\n                // If tranche is completed, and it's the one we are sequentially processing, advance lastCompletedIncomingTranche\\r\\n                if (isTrancheNowComplete && loopTrancheIndex == lastCompletedIncomingTranche) {\\r\\n                    lastCompletedIncomingTranche = loopTrancheIndex + 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            loopTrancheIndex++;\\r\\n        }\\r\\n\\r\\n        uint256 totalAmountAppliedInCall = amount - remainingAmount;\\r\\n        require(totalAmountAppliedInCall > 0, \\\"Pool: no amount applied\\\");\\r\\n\\r\\n        // Transfer tokens from sender\\r\\n        require(\\r\\n            holdToken.transferFrom(msg.sender, address(this), totalAmountAppliedInCall),\\r\\n            \\\"Pool: transfer failed\\\"\\r\\n        );\\r\\n\\r\\n        // Update total returned amount (global state)\\r\\n        totalReturnedAmount += totalAmountAppliedInCall;\\r\\n\\r\\n        // Update reserves based on debt vs bonus allocation (global state)\\r\\n        if (totalAppliedToDebtInCall > 0) {\\r\\n            realHoldReserve += totalAppliedToDebtInCall;\\r\\n            virtualHoldReserve -= totalAppliedToDebtInCall;\\r\\n        }\\r\\n        if (totalAppliedToBonusInCall > 0) {\\r\\n            awaitingBonusAmount += totalAppliedToBonusInCall;\\r\\n            addressBook.eventEmitter().emitPool_AwaitingBonusAmountUpdated(awaitingBonusAmount);\\r\\n        }\\r\\n\\r\\n        addressBook.eventEmitter().emitPool_IncomingReturnSummary(\\r\\n            totalReturnedAmount,\\r\\n            lastCompletedIncomingTranche\\r\\n        );\\r\\n\\r\\n        if (totalAppliedToDebtInCall > 0) {\\r\\n            addressBook.eventEmitter().emitPool_ReservesUpdated(\\r\\n                realHoldReserve,\\r\\n                virtualHoldReserve,\\r\\n                virtualRwaReserve\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Check if fully returned\\r\\n        if (!isFullyReturned && totalReturnedAmount == expectedHoldAmount + expectedBonusAmount) {\\r\\n            isFullyReturned = true;\\r\\n            fullReturnTimestamp = block.timestamp;\\r\\n            addressBook.eventEmitter().emitPool_FundsFullyReturned(fullReturnTimestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates required HOLD amount with fee for minting RWA\\r\\n    /// @param rwaAmount Amount of RWA tokens to mint\\r\\n    /// @param allowPartial If true, allows partial mint when rwaAmount exceeds remaining expectedRwa\\r\\n    /// @return holdAmountWithFee Total amount of HOLD tokens required including fee\\r\\n    /// @return fee Entry fee amount\\r\\n    /// @return actualRwaAmount Actual amount of RWA tokens that will be minted\\r\\n    function estimateMint(\\r\\n        uint256 rwaAmount,\\r\\n        bool allowPartial\\r\\n    ) public view returns (uint256 holdAmountWithFee, uint256 fee, uint256 actualRwaAmount) {\\r\\n        require(rwaAmount > 0, \\\"Pool: zero input\\\");\\r\\n        require(rwaAmount < virtualRwaReserve, \\\"Pool: insufficient RWA reserve\\\");\\r\\n\\r\\n        // Calculate actual RWA amount considering remaining capacity\\r\\n        actualRwaAmount = rwaAmount;\\r\\n        if (fixedSell) {\\r\\n            uint256 remainingRwa = expectedRwaAmount - awaitingRwaAmount;\\r\\n            if (rwaAmount > remainingRwa) {\\r\\n                require(allowPartial, \\\"Pool: exceeds fixed RWA amount\\\");\\r\\n                actualRwaAmount = remainingRwa;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Calculate base HOLD needed using constant product formula\\r\\n        // k = virtualHoldReserve * virtualRwaReserve = (virtualHoldReserve + holdAmount) * (virtualRwaReserve - actualRwaAmount)\\r\\n        // holdAmount = (k / (virtualRwaReserve - actualRwaAmount)) - (virtualHoldReserve + realHoldReserve)\\r\\n        uint256 holdAmount = (k / (virtualRwaReserve - actualRwaAmount)) -\\r\\n            (virtualHoldReserve + realHoldReserve);\\r\\n\\r\\n        // Calculate fee and total amount\\r\\n        fee = (holdAmount * entryFeePercent) / 10000;\\r\\n        holdAmountWithFee = holdAmount + fee;\\r\\n    }\\r\\n\\r\\n    /// @notice Mints RWA tokens for HOLD\\r\\n    /// @param rwaAmount Amount of RWA tokens to mint\\r\\n    /// @param maxHoldAmount Maximum amount of HOLD tokens to spend\\r\\n    /// @param allowPartial If true, allows partial mint when rwaAmount exceeds remaining expectedRwa\\r\\n    function mint(\\r\\n        uint256 rwaAmount,\\r\\n        uint256 maxHoldAmount,\\r\\n        uint256 validUntil,\\r\\n        bool allowPartial\\r\\n    ) external nonReentrant {\\r\\n        require(!paused, \\\"Pool: paused\\\");\\r\\n        require(!isFullyReturned, \\\"Pool: funds fully returned\\\");\\r\\n        require(block.timestamp < completionPeriodExpired, \\\"Pool: completion period expired\\\");\\r\\n        require(block.timestamp >= entryPeriodStart, \\\"Pool: entry period not started\\\");\\r\\n        if (!isTargetReached) {\\r\\n            require(block.timestamp < entryPeriodExpired, \\\"Pool: entry period expired\\\");\\r\\n        }\\r\\n        require(block.timestamp <= validUntil, \\\"Pool: transaction expired\\\");\\r\\n\\r\\n        (uint256 holdAmountWithFee, uint256 fee, uint256 actualRwaAmount) = estimateMint(\\r\\n            rwaAmount,\\r\\n            allowPartial\\r\\n        );\\r\\n        require(holdAmountWithFee <= maxHoldAmount, \\\"Pool: excessive input amount\\\");\\r\\n\\r\\n        // Transfer HOLD tokens from user\\r\\n        require(\\r\\n            holdToken.transferFrom(msg.sender, address(this), holdAmountWithFee),\\r\\n            \\\"Pool: hold transfer failed\\\"\\r\\n        );\\r\\n\\r\\n        address treasury = address(addressBook.treasury());\\r\\n        require(holdToken.transfer(treasury, fee), \\\"Pool: fee transfer failed\\\");\\r\\n\\r\\n        // Update awaiting RWA amount and check target\\r\\n        awaitingRwaAmount += actualRwaAmount;\\r\\n\\r\\n        // Update real reserve and virtual RWA\\r\\n        realHoldReserve += holdAmountWithFee - fee;\\r\\n        virtualRwaReserve -= actualRwaAmount;\\r\\n\\r\\n        // Check if target is reached\\r\\n        if (!isTargetReached && awaitingRwaAmount >= expectedRwaAmount) {\\r\\n            isTargetReached = true;\\r\\n\\r\\n            // Move expected amount to outgoing tranches\\r\\n            require(\\r\\n                realHoldReserve >= expectedHoldAmount,\\r\\n                \\\"Pool: insufficient balance for tranches\\\"\\r\\n            );\\r\\n            outgoingTranchesBalance = expectedHoldAmount;\\r\\n            realHoldReserve -= expectedHoldAmount;\\r\\n            virtualHoldReserve += expectedHoldAmount;\\r\\n\\r\\n            if (floatingOutTranchesTimestamps && block.timestamp < entryPeriodExpired) {\\r\\n                uint256 timeSaved = entryPeriodExpired - block.timestamp;\\r\\n                if (timeSaved > 1 days) {\\r\\n                    floatingTimestampOffset = timeSaved - 1 days;\\r\\n                }\\r\\n            }\\r\\n            addressBook.eventEmitter().emitPool_TargetReached(\\r\\n                outgoingTranchesBalance,\\r\\n                floatingTimestampOffset\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Mint RWA tokens\\r\\n        rwaToken.mint(msg.sender, tokenId, actualRwaAmount);\\r\\n\\r\\n        addressBook.eventEmitter().emitPool_RwaMinted(\\r\\n            msg.sender,\\r\\n            actualRwaAmount,\\r\\n            (holdAmountWithFee - fee),\\r\\n            fee\\r\\n        );\\r\\n        addressBook.eventEmitter().emitPool_AwaitingRwaAmountUpdated(awaitingRwaAmount);\\r\\n        // k changes because virtualRwaReserve changes\\r\\n        addressBook.eventEmitter().emitPool_ReservesUpdated(\\r\\n            realHoldReserve,\\r\\n            virtualHoldReserve,\\r\\n            virtualRwaReserve\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Burns RWA tokens for HOLD\\r\\n    /// @param rwaAmount Amount of RWA tokens to burn\\r\\n    /// @param minHoldAmount Minimum amount of HOLD tokens to receive\\r\\n    function burn(\\r\\n        uint256 rwaAmount,\\r\\n        uint256 minHoldAmount,\\r\\n        uint256 minBonusAmount,\\r\\n        uint256 validUntil\\r\\n    ) external nonReentrant {\\r\\n        require(!paused, \\\"Pool: paused\\\");\\r\\n        require(block.timestamp <= validUntil, \\\"Pool: transaction expired\\\");\\r\\n        if (!allowEntryBurn) {\\r\\n            require(\\r\\n                block.timestamp >= entryPeriodExpired,\\r\\n                \\\"Pool: burning not allowed during entry period\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (\\r\\n            uint256 holdAmountWithoutFee,\\r\\n            uint256 holdFee,\\r\\n            uint256 bonusAmountWithoutFee,\\r\\n            uint256 bonusFee\\r\\n        ) = estimateBurn(rwaAmount);\\r\\n\\r\\n        // Check minimum amounts separately\\r\\n        require(holdAmountWithoutFee >= minHoldAmount, \\\"Pool: insufficient hold amount\\\");\\r\\n        require(bonusAmountWithoutFee >= minBonusAmount, \\\"Pool: insufficient bonus amount\\\");\\r\\n\\r\\n        // Update reserves\\r\\n        realHoldReserve -= (holdAmountWithoutFee + holdFee);\\r\\n        virtualRwaReserve += rwaAmount;\\r\\n\\r\\n        // Update awaiting amounts\\r\\n        awaitingRwaAmount -= rwaAmount;\\r\\n        if (bonusAmountWithoutFee > 0) {\\r\\n            awaitingBonusAmount -= (bonusAmountWithoutFee + bonusFee);\\r\\n            addressBook.eventEmitter().emitPool_AwaitingBonusAmountUpdated(awaitingBonusAmount);\\r\\n        }\\r\\n\\r\\n        // Burn RWA tokens\\r\\n        rwaToken.burn(msg.sender, tokenId, rwaAmount);\\r\\n\\r\\n        // Transfer HOLD to user\\r\\n        require(\\r\\n            holdToken.transfer(msg.sender, holdAmountWithoutFee + bonusAmountWithoutFee),\\r\\n            \\\"Pool: hold transfer failed\\\"\\r\\n        );\\r\\n\\r\\n        // Transfer fee to treasury\\r\\n        address treasury = address(addressBook.treasury());\\r\\n        require(holdToken.transfer(treasury, holdFee + bonusFee), \\\"Pool: fee transfer failed\\\");\\r\\n\\r\\n        addressBook.eventEmitter().emitPool_RwaBurned(\\r\\n            msg.sender,\\r\\n            rwaAmount,\\r\\n            holdAmountWithoutFee,\\r\\n            bonusAmountWithoutFee,\\r\\n            holdFee,\\r\\n            bonusFee\\r\\n        );\\r\\n        addressBook.eventEmitter().emitPool_AwaitingRwaAmountUpdated(awaitingRwaAmount);\\r\\n        // k changes because virtualRwaReserve changes\\r\\n        addressBook.eventEmitter().emitPool_ReservesUpdated(\\r\\n            realHoldReserve,\\r\\n            virtualHoldReserve,\\r\\n            virtualRwaReserve\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates HOLD amounts and fees for burning RWA\\r\\n    /// @param rwaAmount Amount of RWA tokens to burn\\r\\n    /// @return holdAmountWithoutFee Base amount of HOLD tokens from AMM before fee\\r\\n    /// @return holdFee Exit fee on base amount\\r\\n    /// @return bonusAmountWithoutFee Bonus amount before fee\\r\\n    /// @return bonusFee Exit fee on bonus amount\\r\\n    function estimateBurn(\\r\\n        uint256 rwaAmount\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 holdAmountWithoutFee,\\r\\n            uint256 holdFee,\\r\\n            uint256 bonusAmountWithoutFee,\\r\\n            uint256 bonusFee\\r\\n        )\\r\\n    {\\r\\n        require(rwaAmount > 0, \\\"Pool: zero input\\\");\\r\\n        require(rwaAmount <= virtualRwaReserve, \\\"Pool: insufficient RWA reserve\\\");\\r\\n\\r\\n        // Calculate total HOLD output using constant product formula\\r\\n        // k = virtualHoldReserve * virtualRwaReserve = (virtualHoldReserve - holdAmount) * (virtualRwaReserve + rwaAmount)\\r\\n        // holdAmount = (virtualHoldReserve + realHoldReserve) - (k / (virtualRwaReserve + rwaAmount))\\r\\n        uint256 totalHoldAmount = (virtualHoldReserve + realHoldReserve) -\\r\\n            (k / (virtualRwaReserve + rwaAmount));\\r\\n\\r\\n        // Calculate total bonus amount if available\\r\\n        uint256 totalBonusAmount = 0;\\r\\n        bool hasBonuses = awaitingBonusAmount > 0 && awaitingRwaAmount > 0;\\r\\n    \\r\\n        if (hasBonuses && checkBonusesUnlocked()) {\\r\\n            totalBonusAmount = (awaitingBonusAmount * rwaAmount) / awaitingRwaAmount;\\r\\n        }\\r\\n    \\r\\n        // Calculate fees\\r\\n        holdFee = (totalHoldAmount * exitFeePercent) / 10000;\\r\\n        bonusFee = (totalBonusAmount * exitFeePercent) / 10000;\\r\\n\\r\\n        // Calculate amounts without fees\\r\\n        holdAmountWithoutFee = totalHoldAmount - holdFee;\\r\\n        bonusAmountWithoutFee = totalBonusAmount - bonusFee;\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if bonuses are unlocked\\r\\n    /// @return True if bonuses are unlocked, false otherwise\\r\\n    function checkBonusesUnlocked() public view returns (bool) {\\r\\n        return\\r\\n            block.timestamp >= completionPeriodExpired ||\\r\\n            (!awaitCompletionExpired &&\\r\\n                isFullyReturned &&\\r\\n                block.timestamp >= fullReturnTimestamp + 1 days);\\r\\n    }\\r\\n\\r\\n    /// @notice Enables emergency pause on the pool\\r\\n    /// @dev Can only be called by governance. Pool operations will be blocked.\\r\\n    function enablePause() external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(!paused, \\\"Pool: already paused\\\");\\r\\n        paused = true;\\r\\n        addressBook.eventEmitter().emitPool_PausedStateChanged(true);\\r\\n    }\\r\\n\\r\\n    /// @notice Disables emergency pause on the pool\\r\\n    /// @dev Can only be called by governance. Pool operations will be unblocked.\\r\\n    function disablePause() external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(paused, \\\"Pool: not paused\\\");\\r\\n        paused = false;\\r\\n        addressBook.eventEmitter().emitPool_PausedStateChanged(false);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns arrays of outgoing tranches information\\r\\n    /// @return amounts Array of outgoing tranche amounts\\r\\n    /// @return timestamps Array of outgoing tranche delays\\r\\n    /// @return states Array of outgoing tranche states (claimed amounts)\\r\\n    function getOutgoingTranches()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts, uint256[] memory timestamps, uint256[] memory states)\\r\\n    {\\r\\n        return (outgoingTranches, outgoingTranchTimestamps, outgoingTrancheStates);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns arrays of incoming tranches information\\r\\n    /// @return amounts Array of incoming tranche amounts\\r\\n    /// @return expired Array of incoming tranche expiration timestamps\\r\\n    /// @return states Array of incoming tranche states (returned amounts)\\r\\n    function getIncomingTranches()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts, uint256[] memory expired, uint256[] memory states)\\r\\n    {\\r\\n        return (incomingTranches, incomingTrancheExpired, incomingTrancheStates);\\r\\n    }\\r\\n\\r\\n    function uniqueContractId() public pure override returns (bytes32) {\\r\\n        return keccak256(\\\"Pool\\\");\\r\\n    }\\r\\n\\r\\n    function implementationVersion() public pure override returns (uint256) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function _verifyAuthorizeUpgradeRole() internal view override {\\r\\n        addressBook.requireTimelock(msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf08913c333d1fc049e27a56839aaabb29987566c3ef391bcfad6c4346fc26491\",\"license\":\"MIT\"},\"contracts/rwa/RWA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport { UpgradeableContract } from \\\"../utils/UpgradeableContract.sol\\\";\\r\\nimport { ERC1155Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\r\\nimport { ERC1155SupplyUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\r\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\n\\r\\n/// @title RWA Token Contract\\r\\n/// @notice Contract for managing real world asset tokens\\r\\n/// @dev Implements ERC1155 standard with upgradeable functionality\\r\\ncontract RWA is UpgradeableContract, ERC1155Upgradeable, ERC1155SupplyUpgradeable {\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n\\r\\n    /// @notice Owner address\\r\\n    address public owner;\\r\\n\\r\\n    string public entityId;\\r\\n    string public entityOwnerId;\\r\\n    string public entityOwnerType;\\r\\n\\r\\n    /// @notice Mapping of token ID to pool address\\r\\n    mapping(uint256 => address) public pools;\\r\\n\\r\\n    /// @notice Unique token ID amount\\r\\n    uint256 public tokensLength;\\r\\n\\r\\n    constructor() UpgradeableContract() {}\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    /// @dev Can only be called once\\r\\n    /// @param initialAddressBook Address of the AddressBook contract\\r\\n    function initialize(\\r\\n        address initialAddressBook,\\r\\n        address initialOwner,\\r\\n        string memory initialEntityId,\\r\\n        string memory initialEntityOwnerId,\\r\\n        string memory initialEntityOwnerType\\r\\n    ) external initializer {\\r\\n        require(initialOwner != address(0), \\\"Invalid owner\\\");\\r\\n        require(initialAddressBook != address(0), \\\"Invalid addressBook\\\");\\r\\n\\r\\n        __UpgradeableContract_init();\\r\\n        __ERC1155_init_unchained(\\\"\\\");\\r\\n        __ERC1155Supply_init_unchained();\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n        owner = initialOwner;\\r\\n        entityId = initialEntityId;\\r\\n        entityOwnerId = initialEntityOwnerId;\\r\\n        entityOwnerType = initialEntityOwnerType;\\r\\n\\r\\n        addressBook.eventEmitter().emitRWA_Deployed(\\r\\n            initialOwner,\\r\\n            initialEntityId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function uniqueContractId() public pure override returns (bytes32) {\\r\\n        return keccak256(\\\"RWA\\\");\\r\\n    }\\r\\n\\r\\n    function implementationVersion() public pure override returns (uint256) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function _verifyAuthorizeUpgradeRole() internal view override {\\r\\n        addressBook.requireTimelock(msg.sender);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(UpgradeableContract, ERC1155Upgradeable) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// @notice override base function\\r\\n    function _update(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values\\r\\n    ) internal virtual override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\\r\\n        super._update(from, to, ids, values);\\r\\n        \\r\\n        // Emit our custom event for each token transfer\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            addressBook.eventEmitter().emitRWA_Transfer(from, to, ids[i], values[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Creates a new token with specified parameters\\r\\n    /// @dev Can only be called by the factory address registered in AddressBook\\r\\n    /// @param pool The address of the pool managing this token\\r\\n    /// @return uint256 token id\\r\\n    function createToken(address pool) external returns (uint256) {\\r\\n        addressBook.requireFactory(msg.sender);\\r\\n        uint256 tokenId = ++tokensLength;\\r\\n        require(pools[tokenId] == address(0), \\\"Token already exists\\\");\\r\\n        require(pool != address(0), \\\"Invalid pool address\\\");\\r\\n\\r\\n        pools[tokenId] = pool;\\r\\n\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    /// @notice Mints tokens\\r\\n    /// @dev Can only be called by the associated pool\\r\\n    /// @param account The address to mint tokens to\\r\\n    /// @param tokenId The ID of the token to mint\\r\\n    /// @param amount The amount of tokens to mint\\r\\n    function mint(address account, uint256 tokenId, uint256 amount) external {\\r\\n        // require(msg.sender == pools[tokenId], \\\"Only pool can mint\\\");\\r\\n        require(account != address(0), \\\"Invalid recipient\\\");\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n\\r\\n        _mint(account, tokenId, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Burns tokens\\r\\n    /// @dev Can only be called by the associated pool\\r\\n    /// @param account The address to burn tokens from\\r\\n    /// @param tokenId The ID of the token to burn\\r\\n    /// @param amount The amount of tokens to burn\\r\\n    function burn(address account, uint256 tokenId, uint256 amount) external {\\r\\n        // require(msg.sender == pools[tokenId], \\\"Only pool can burn\\\");\\r\\n        require(account != address(0), \\\"Invalid account\\\");\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(balanceOf(account, tokenId) >= amount, \\\"Insufficient balance\\\");\\r\\n        _burn(account, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the metadata URI for a specific token\\r\\n    /// @param tokenId The ID of the token\\r\\n    /// @return string The complete metadata URI for the token\\r\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\r\\n        require(tokenId != 0 && tokenId <= tokensLength, \\\"URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory baseUri = addressBook.config().baseMetadataUri();\\r\\n        return string(\\r\\n            abi.encodePacked(\\r\\n                baseUri,\\r\\n                \\\"/\\\",\\r\\n                Strings.toHexString(address(this)),\\r\\n                \\\"/\\\",\\r\\n                Strings.toString(tokenId)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x63a8578dc0e9a480173f3fbb8362b3bdcb2f844e2918e827a846feba37e7dc10\",\"license\":\"MIT\"},\"contracts/system/AddressBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport { UpgradeableContract } from \\\"../utils/UpgradeableContract.sol\\\";\\r\\n\\r\\nimport { Config } from \\\"./Config.sol\\\";\\r\\nimport { EventEmitter } from \\\"./EventEmitter.sol\\\";\\r\\nimport { DaoStaking } from \\\"../dao/DaoStaking.sol\\\";\\r\\nimport { Governance } from \\\"../dao/Governance.sol\\\";\\r\\nimport { DaoToken } from \\\"../dao/DaoToken.sol\\\";\\r\\nimport { Timelock } from \\\"../dao/Timelock.sol\\\";\\r\\nimport { Treasury } from \\\"../dao/Treasury.sol\\\";\\r\\nimport { Payment } from \\\"../platform/Payment.sol\\\";\\r\\nimport { Airdrop } from \\\"../platform/Airdrop.sol\\\";\\r\\nimport { PlatformStaking } from \\\"../platform/PlatformStaking.sol\\\";\\r\\nimport { PlatformStakingAirdrop } from \\\"../platform/PlatformStakingAirdrop.sol\\\";\\r\\nimport { PlatformToken } from \\\"../platform/PlatformToken.sol\\\";\\r\\nimport { ReferralTreasury } from \\\"../platform/ReferralTreasury.sol\\\";\\r\\nimport { Factory } from \\\"../rwa/Factory.sol\\\";\\r\\n// import { Router } from \\\"../rwa/Router.sol\\\";\\r\\nimport { RWA } from \\\"../rwa/RWA.sol\\\";\\r\\nimport { Pool } from \\\"../rwa/Pool.sol\\\";\\r\\n\\r\\n/// @title AddressBook contract for managing system addresses\\r\\n/// @notice This contract stores and manages addresses of core protocol contracts\\r\\n/// @dev Handles setting and managing addresses for all protocol contracts\\r\\ncontract AddressBook is UpgradeableContract {\\r\\n    /// @notice The governance contract address\\r\\n    Governance public governance;\\r\\n\\r\\n    /// @notice The config contract address\\r\\n    Config public config;\\r\\n\\r\\n    /// @notice The eventEmitter contract address\\r\\n    EventEmitter public eventEmitter;\\r\\n\\r\\n    /// @notice The DAO token contract address\\r\\n    DaoToken public daoToken;\\r\\n\\r\\n    /// @notice The DAO staking contract address\\r\\n    DaoStaking public daoStaking;\\r\\n\\r\\n    /// @notice The timelock contract address\\r\\n    Timelock public timelock;\\r\\n\\r\\n    /// @notice The treasury contract address\\r\\n    Treasury public treasury;\\r\\n\\r\\n    /// @notice The payment contract address\\r\\n    Payment public payment;\\r\\n\\r\\n    /// @notice The airdrop contract address\\r\\n    Airdrop public airdrop;\\r\\n\\r\\n    /// @notice The platform staking contract address\\r\\n    PlatformStaking public platformStaking;\\r\\n\\r\\n    /// @notice The platform staking airdrop contract address\\r\\n    PlatformStakingAirdrop public platformStakingAirdrop;\\r\\n\\r\\n    /// @notice The platform token contract address\\r\\n    PlatformToken public platformToken;\\r\\n\\r\\n    /// @notice The referral treasury contract address\\r\\n    ReferralTreasury public referralTreasury;\\r\\n\\r\\n    /// @notice The factory contract address\\r\\n    Factory public factory;\\r\\n\\r\\n    // /// @notice The router contract address\\r\\n    // Router public router;\\r\\n\\r\\n    /// @notice The implementation contract address for RWA\\r\\n    address public rwaImplementation;\\r\\n\\r\\n    /// @notice The implementation contract address for Speculation Pool\\r\\n    address public poolImplementation;\\r\\n\\r\\n    /// @notice Array of all registered pools\\r\\n    Pool[] internal pools;\\r\\n\\r\\n    /// @notice Mapping to check if an address is a registered speculation pool\\r\\n    mapping(address => bool) public isPool;\\r\\n\\r\\n    /// @notice Array of all registered RWA addresses\\r\\n    RWA[] internal rwas;\\r\\n\\r\\n    /// @notice Mapping to check if an address is a registered RWA\\r\\n    mapping(address => bool) public isRWA;\\r\\n\\r\\n    /// @notice Mapping to check if an address is a registered protocol contract\\r\\n    mapping(address => bool) public isProtocolContract;\\r\\n\\r\\n    /// @notice Mapping to track authorized signers\\r\\n    mapping(address => bool) public signers;\\r\\n\\r\\n    /// @notice Number of authorized signers\\r\\n    uint256 public signersLength;\\r\\n\\r\\n    constructor() UpgradeableContract() {}\\r\\n\\r\\n    /// @notice Initializes the contract setting initial governance\\r\\n    /// @dev Can only be called once through initializer modifier\\r\\n    function initialize() external initializer {\\r\\n        __UpgradeableContract_init();\\r\\n        governance = Governance(msg.sender);\\r\\n        timelock = Timelock(payable(msg.sender));\\r\\n    }\\r\\n\\r\\n    function uniqueContractId() public pure override returns (bytes32) {\\r\\n        return keccak256(\\\"AddressBook\\\");\\r\\n    }\\r\\n\\r\\n    function implementationVersion() public pure override returns (uint256) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function _verifyAuthorizeUpgradeRole() internal view override {\\r\\n        requireTimelock(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if an address has governance rights\\r\\n    /// @dev Reverts if account is not governance\\r\\n    /// @param account The address to check\\r\\n    function requireGovernance(address account) public view {\\r\\n        require(account == address(governance), \\\"AddressBook: not governance\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if an address has timelock rights\\r\\n    /// @dev Reverts if account is not timelock\\r\\n    /// @param account The address to check\\r\\n    function requireTimelock(address account) public view {\\r\\n        require(account == address(timelock), \\\"Only timelock!\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if an address has factory rights\\r\\n    /// @dev Reverts if account is not factory\\r\\n    /// @param account The address to check\\r\\n    function requireFactory(address account) public view {\\r\\n        require(account == address(factory), \\\"Only factory!\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the governance address\\r\\n    /// @dev Can only be called by current governance\\r\\n    /// @param newGovernance The address of the new governance\\r\\n    function setGovernance(Governance newGovernance) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(governance) != address(0)) {\\r\\n            isProtocolContract[address(governance)] = false;\\r\\n        }\\r\\n        governance = newGovernance;\\r\\n        isProtocolContract[address(newGovernance)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the config contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newConfig The address of the new config contract\\r\\n    function setConfig(Config newConfig) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(config) != address(0)) {\\r\\n            isProtocolContract[address(config)] = false;\\r\\n        }\\r\\n        config = newConfig;\\r\\n        isProtocolContract[address(newConfig)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the DAO token contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newDaoToken The address of the new DAO token contract\\r\\n    function setDaoToken(DaoToken newDaoToken) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(daoToken) != address(0)) {\\r\\n            isProtocolContract[address(daoToken)] = false;\\r\\n        }\\r\\n        daoToken = newDaoToken;\\r\\n        isProtocolContract[address(newDaoToken)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the DAO staking contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newDaoStaking The address of the new DAO staking contract\\r\\n    function setDaoStaking(DaoStaking newDaoStaking) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(daoStaking) != address(0)) {\\r\\n            isProtocolContract[address(daoStaking)] = false;\\r\\n        }\\r\\n        daoStaking = newDaoStaking;\\r\\n        isProtocolContract[address(newDaoStaking)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the timelock contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newTimelock The address of the new timelock contract\\r\\n    function setTimelock(Timelock newTimelock) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(timelock) != address(0)) {\\r\\n            isProtocolContract[address(timelock)] = false;\\r\\n        }\\r\\n        timelock = newTimelock;\\r\\n        isProtocolContract[address(newTimelock)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the treasury contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newTreasury The address of the new treasury contract\\r\\n    function setTreasury(Treasury newTreasury) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(treasury) != address(0)) {\\r\\n            isProtocolContract[address(treasury)] = false;\\r\\n        }\\r\\n        treasury = newTreasury;\\r\\n        isProtocolContract[address(newTreasury)] = true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /// @notice Sets the payment contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newPayment The address of the new payment contract\\r\\n    function setPayment(Payment newPayment) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(payment) != address(0)) {\\r\\n            isProtocolContract[address(payment)] = false;\\r\\n        }\\r\\n        payment = newPayment;\\r\\n        isProtocolContract[address(newPayment)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the airdrop contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newAirdrop The address of the new airdrop contract\\r\\n    function setAirdrop(Airdrop newAirdrop) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(airdrop) != address(0)) {\\r\\n            isProtocolContract[address(airdrop)] = false;\\r\\n        }\\r\\n        airdrop = newAirdrop;\\r\\n        isProtocolContract[address(newAirdrop)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the platform staking contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newPlatformStaking The address of the new platform staking contract\\r\\n    function setPlatformStaking(PlatformStaking newPlatformStaking) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(platformStaking) != address(0)) {\\r\\n            isProtocolContract[address(platformStaking)] = false;\\r\\n        }\\r\\n        platformStaking = newPlatformStaking;\\r\\n        isProtocolContract[address(newPlatformStaking)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the platform staking airdrop contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newPlatformStakingAirdrop The address of the new platform staking airdrop contract\\r\\n    function setPlatformStakingAirdrop(PlatformStakingAirdrop newPlatformStakingAirdrop) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(platformStakingAirdrop) != address(0)) {\\r\\n            isProtocolContract[address(platformStakingAirdrop)] = false;\\r\\n        }\\r\\n        platformStakingAirdrop = newPlatformStakingAirdrop;\\r\\n        isProtocolContract[address(newPlatformStakingAirdrop)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the platform token contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newPlatformToken The address of the new platform token contract\\r\\n    function setPlatformToken(PlatformToken newPlatformToken) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(platformToken) != address(0)) {\\r\\n            isProtocolContract[address(platformToken)] = false;\\r\\n        }\\r\\n        platformToken = newPlatformToken;\\r\\n        isProtocolContract[address(newPlatformToken)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the referral treasury contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newReferralTreasury The address of the new referral treasury contract\\r\\n    function setReferralTreasury(ReferralTreasury newReferralTreasury) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(referralTreasury) != address(0)) {\\r\\n            isProtocolContract[address(referralTreasury)] = false;\\r\\n        }\\r\\n        referralTreasury = newReferralTreasury;\\r\\n        isProtocolContract[address(newReferralTreasury)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the factory contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newFactory The address of the new factory contract\\r\\n    function setFactory(Factory newFactory) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        if (address(factory) != address(0)) {\\r\\n            isProtocolContract[address(factory)] = false;\\r\\n        }\\r\\n        factory = newFactory;\\r\\n        isProtocolContract[address(newFactory)] = true;\\r\\n    }\\r\\n\\r\\n    // /// @notice Sets the router contract address\\r\\n    // /// @dev Can only be called by governance\\r\\n    // /// @param newRouter The address of the new router contract\\r\\n    // function setRouter(Router newRouter) external {\\r\\n    //     requireGovernance(msg.sender);\\r\\n    //     if (address(router) != address(0)) {\\r\\n    //         isProtocolContract[address(router)] = false;\\r\\n    //     }\\r\\n    //     router = newRouter;\\r\\n    //     isProtocolContract[address(newRouter)] = true;\\r\\n    // }\\r\\n\\r\\n    /// @notice Adds a new signer\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newSigner The address of the new signer to add\\r\\n    function addSigner(address newSigner) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        require(newSigner != address(0), \\\"Invalid signer address\\\");\\r\\n        require(!signers[newSigner], \\\"Signer already exists\\\");\\r\\n        \\r\\n        signers[newSigner] = true;\\r\\n        signersLength++;\\r\\n    }\\r\\n\\r\\n    /// @notice Removes an existing signer\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param signer The address of the signer to remove\\r\\n    function removeSigner(address signer) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        require(signers[signer], \\\"Signer does not exist\\\");\\r\\n        \\r\\n        signers[signer] = false;\\r\\n        signersLength--;\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if an address is an authorized signer\\r\\n    /// @dev Reverts if account is not a signer\\r\\n    /// @param account The address to check\\r\\n    function requireSigner(address account) public view {\\r\\n        require(signers[account], \\\"Not an authorized signer!\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the event emitter contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newEventEmitter The address of the new event emitter contract\\r\\n    function setEventEmitter(EventEmitter newEventEmitter) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        eventEmitter = newEventEmitter;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the RWA implementation contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newImplementation The address of the new RWA implementation\\r\\n    function setRWAImplementation(address newImplementation) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        rwaImplementation = newImplementation;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the Speculation Pool implementation contract address\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param newImplementation The address of the new Speculation Pool implementation\\r\\n    function setPoolImplementation(address newImplementation) external {\\r\\n        requireGovernance(msg.sender);\\r\\n        poolImplementation = newImplementation;\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if an address is a registered protocol contract\\r\\n    /// @dev Reverts if account is not a protocol contract\\r\\n    /// @param account The address to check\\r\\n    function requireProtocolContract(address account) public view {\\r\\n        require(isProtocolContract[account], \\\"Not a protocol contract!\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Adds a new  pool to the system\\r\\n    /// @dev Can only be called by factory\\r\\n    /// @param pool The address of the pool to add\\r\\n    function addPool(Pool pool) external {\\r\\n        requireFactory(msg.sender);\\r\\n        require(!isPool[address(pool)], \\\"Pool already exists\\\");\\r\\n        pools.push(pool);\\r\\n        isPool[address(pool)] = true;\\r\\n        isProtocolContract[address(pool)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Adds a new RWA to the system\\r\\n    /// @dev Can only be called by governance\\r\\n    /// @param rwa The address of the RWA to add\\r\\n    function addRWA(RWA rwa) external {\\r\\n        require(msg.sender == address(factory), \\\"Only factory!\\\");\\r\\n        require(!isRWA[address(rwa)], \\\"RWA already exists\\\");\\r\\n        rwas.push(rwa);\\r\\n        isRWA[address(rwa)] = true;\\r\\n        isProtocolContract[address(rwa)] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns pool at specific index\\r\\n    /// @param index Index of the pool to return\\r\\n    /// @return BasePool Pool at specified index\\r\\n    function getPoolByIndex(uint256 index) external view returns(Pool) {\\r\\n        require(index < pools.length, \\\"Index out of bounds\\\");\\r\\n        return pools[index];\\r\\n    }\\r\\n\\r\\n    /// @notice Returns RWA at specific index\\r\\n    /// @param index Index of the RWA to return\\r\\n    /// @return RWA RWA at specified index\\r\\n    function getRWAByIndex(uint256 index) external view returns(RWA) {\\r\\n        require(index < rwas.length, \\\"Index out of bounds\\\");\\r\\n        return rwas[index];\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the number of registered RWAs\\r\\n    /// @return uint256 Number of registered RWAs\\r\\n    function rwasLength() external view returns(uint256) {\\r\\n        return rwas.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the number of registered pools\\r\\n    /// @return uint256 Number of registered pools\\r\\n    function poolsLength() external view returns(uint256) {\\r\\n        return pools.length;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x09d7d30648c8b372cab4d1ac136eeace1d08b990eeb868a770bea332bee68f2b\",\"license\":\"MIT\"},\"contracts/system/Config.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport { UpgradeableContract } from \\\"../utils/UpgradeableContract.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"./AddressBook.sol\\\";\\r\\n\\r\\n/// @title Configuration contract for RWA protocol\\r\\n/// @notice Stores all configurable parameters for the protocol\\r\\n/// @dev Upgradeable contract using UUPS proxy pattern\\r\\ncontract Config is UpgradeableContract {\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n    \\r\\n    /// @notice Base URI for token metadata\\r\\n    string public baseMetadataUri;\\r\\n\\r\\n    /// @notice Token used for holding\\r\\n    IERC20 public holdToken;\\r\\n\\r\\n    /// @notice Minimum number of signers required for operations\\r\\n    uint256 public minSignersRequired;\\r\\n\\r\\n    /// @notice Fee range for creating RWA (in HOLD tokens)\\r\\n    uint256 public createRWAFeeMin;\\r\\n    uint256 public createRWAFeeMax;\\r\\n\\r\\n    /// @notice Fee ratio range for creating pool (in basis points, max 10000 = 100%)\\r\\n    uint256 public createPoolFeeRatioMin;\\r\\n    uint256 public createPoolFeeRatioMax;\\r\\n\\r\\n    /// @notice Expected HOLD amount range\\r\\n    uint256 public expectedHoldAmountMin;\\r\\n    uint256 public expectedHoldAmountMax;\\r\\n\\r\\n    /// @notice Expected RWA amount range\\r\\n    uint256 public expectedRwaAmountMin;\\r\\n    uint256 public expectedRwaAmountMax;\\r\\n\\r\\n    /// @notice Entry fee percentage range (in basis points, max 10000 = 100%)\\r\\n    uint256 public entryFeePercentMin;\\r\\n    uint256 public entryFeePercentMax;\\r\\n\\r\\n    /// @notice Exit fee percentage range (in basis points, max 10000 = 100%)\\r\\n    uint256 public exitFeePercentMin;\\r\\n    uint256 public exitFeePercentMax;\\r\\n\\r\\n    /// @notice Reward percentage range (in basis points)\\r\\n    uint256 public rewardPercentMin;\\r\\n    uint256 public rewardPercentMax;\\r\\n\\r\\n    // --- Period Configuration ---\\r\\n    /// @notice Minimum duration for entry period (between start and expired)\\r\\n    uint256 public entryPeriodMinDuration;\\r\\n    \\r\\n    /// @notice Maximum duration for entry period (between start and expired)\\r\\n    uint256 public entryPeriodMaxDuration;\\r\\n\\r\\n    /// @notice Minimum duration for completion period (between entry expired and completion expired)\\r\\n    uint256 public completionPeriodMinDuration;\\r\\n    \\r\\n    /// @notice Maximum duration for completion period (between entry expired and completion expired)\\r\\n    uint256 public completionPeriodMaxDuration;\\r\\n\\r\\n    /// @notice Maximum past offset for entry period start (e.g. 1 days for yesterday)\\r\\n    uint256 public maxEntryStartPastOffset;\\r\\n    \\r\\n    /// @notice Maximum future offset for entry period start (e.g. 180 days for 6 months)\\r\\n    uint256 public maxEntryStartFutureOffset;\\r\\n\\r\\n    // --- Tranche Configuration ---\\r\\n    /// @notice Configuration for outgoing tranches\\r\\n    uint256 public outgoingTranchesMinCount;\\r\\n    uint256 public outgoingTranchesMaxCount;\\r\\n    uint256 public outgoingTranchesMinPercent;\\r\\n    uint256 public outgoingTranchesMaxPercent;\\r\\n    uint256 public outgoingTranchesMinInterval;\\r\\n\\r\\n    /// @notice Configuration for incoming tranches\\r\\n    uint256 public incomingTranchesMinCount;\\r\\n    uint256 public incomingTranchesMaxCount;\\r\\n    uint256 public incomingTranchesMinPercent;\\r\\n    uint256 public incomingTranchesMaxPercent;\\r\\n    uint256 public incomingTranchesMinInterval;\\r\\n\\r\\n    // --- Liquidity Coefficient Configuration ---\\r\\n    /// @notice Mapping of price impact percentage (multiplied by 100) to liquidity coefficient\\r\\n    /// @dev Example: 1 => 13334 means 0.01% => 13334\\r\\n    mapping(uint256 => uint256) public liquidityCoefficients;\\r\\n\\r\\n    /// @notice Constructor that disables initializers\\r\\n    constructor() UpgradeableContract() {}\\r\\n\\r\\n    function initialize(\\r\\n        address initialAddressBook,\\r\\n        string memory initialBaseMetadataUri,\\r\\n        address initialHoldToken,\\r\\n        uint256 initialMinSignersRequired,\\r\\n        uint256 initialCreateRWAFeeMin,\\r\\n        uint256 initialCreateRWAFeeMax,\\r\\n        uint256 initialCreatePoolFeeRatioMin,\\r\\n        uint256 initialCreatePoolFeeRatioMax,\\r\\n        uint256 initialExpectedHoldAmountMin,\\r\\n        uint256 initialExpectedHoldAmountMax,\\r\\n        uint256 initialExpectedRwaAmountMin,\\r\\n        uint256 initialExpectedRwaAmountMax,\\r\\n        uint256 initialEntryFeePercentMin,\\r\\n        uint256 initialEntryFeePercentMax,\\r\\n        uint256 initialExitFeePercentMin,\\r\\n        uint256 initialExitFeePercentMax,\\r\\n        uint256 initialRewardPercentMin,\\r\\n        uint256 initialRewardPercentMax,\\r\\n        uint256 initialEntryPeriodMinDuration,\\r\\n        uint256 initialEntryPeriodMaxDuration,\\r\\n        uint256 initialCompletionPeriodMinDuration,\\r\\n        uint256 initialCompletionPeriodMaxDuration,\\r\\n        uint256 initialMaxEntryStartPastOffset,\\r\\n        uint256 initialMaxEntryStartFutureOffset,\\r\\n        uint256 initialOutgoingTranchesMinCount,\\r\\n        uint256 initialOutgoingTranchesMaxCount,\\r\\n        uint256 initialOutgoingTranchesMinPercent,\\r\\n        uint256 initialOutgoingTranchesMaxPercent,\\r\\n        uint256 initialOutgoingTranchesMinInterval,\\r\\n        uint256 initialIncomingTranchesMinCount,\\r\\n        uint256 initialIncomingTranchesMaxCount,\\r\\n        uint256 initialIncomingTranchesMinPercent,\\r\\n        uint256 initialIncomingTranchesMaxPercent,\\r\\n        uint256 initialIncomingTranchesMinInterval,\\r\\n        uint256[] memory initialPriceImpactPercentages,\\r\\n        uint256[] memory initialCoefficients\\r\\n    ) external initializer {\\r\\n        __UpgradeableContract_init();\\r\\n\\r\\n        require(initialAddressBook != address(0), \\\"Invalid address book\\\");\\r\\n        require(initialHoldToken != address(0), \\\"Invalid hold token\\\");\\r\\n        require(initialMinSignersRequired > 0, \\\"Invalid min signers required\\\");\\r\\n        require(initialCreateRWAFeeMin < initialCreateRWAFeeMax, \\\"Invalid RWA fee range\\\");\\r\\n        require(initialCreatePoolFeeRatioMin < initialCreatePoolFeeRatioMax, \\\"Invalid pool fee ratio range\\\");\\r\\n        require(initialCreatePoolFeeRatioMax <= 10000, \\\"Pool fee ratio too high\\\"); // Max 100%\\r\\n\\r\\n        // Validate amount ranges\\r\\n        require(initialExpectedHoldAmountMin < initialExpectedHoldAmountMax, \\\"Invalid expected HOLD range\\\");\\r\\n        require(initialExpectedRwaAmountMin < initialExpectedRwaAmountMax, \\\"Invalid expected RWA range\\\");\\r\\n        require(initialEntryFeePercentMax <= 10000, \\\"Entry fee too high\\\"); // Max 100%\\r\\n        require(initialExitFeePercentMax <= 10000, \\\"Exit fee too high\\\"); // Max 100%\\r\\n        require(initialRewardPercentMin < initialRewardPercentMax, \\\"Invalid reward range\\\");\\r\\n\\r\\n        // Validate period durations\\r\\n        require(initialEntryPeriodMinDuration > 0, \\\"Invalid entry period min duration\\\");\\r\\n        require(initialEntryPeriodMaxDuration > initialEntryPeriodMinDuration, \\\"Invalid entry period max duration\\\");\\r\\n        require(initialCompletionPeriodMinDuration > 0, \\\"Invalid completion period min duration\\\");\\r\\n        require(initialCompletionPeriodMaxDuration > initialCompletionPeriodMinDuration, \\\"Invalid completion period max duration\\\");\\r\\n\\r\\n        // Validate entry period offsets\\r\\n        require(initialMaxEntryStartPastOffset > 0, \\\"Invalid past offset\\\");\\r\\n        require(initialMaxEntryStartFutureOffset > initialMaxEntryStartPastOffset, \\\"Invalid future offset\\\");\\r\\n\\r\\n        // Validate tranche configs\\r\\n        require(initialOutgoingTranchesMinCount > 0 && initialOutgoingTranchesMaxCount >= initialOutgoingTranchesMinCount, \\\"Invalid outgoing count range\\\");\\r\\n        require(initialOutgoingTranchesMinPercent > 0 && initialOutgoingTranchesMaxPercent <= 10000, \\\"Invalid outgoing percent range\\\");\\r\\n        require(initialOutgoingTranchesMinInterval > 0, \\\"Invalid outgoing interval\\\");\\r\\n\\r\\n        require(initialIncomingTranchesMinCount > 0 && initialIncomingTranchesMaxCount >= initialIncomingTranchesMinCount, \\\"Invalid incoming count range\\\");\\r\\n        require(initialIncomingTranchesMinPercent > 0 && initialIncomingTranchesMaxPercent <= 10000, \\\"Invalid incoming percent range\\\");\\r\\n        require(initialIncomingTranchesMinInterval > 0, \\\"Invalid incoming interval\\\");\\r\\n\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n        baseMetadataUri = initialBaseMetadataUri;\\r\\n        holdToken = IERC20(initialHoldToken);\\r\\n        minSignersRequired = initialMinSignersRequired;\\r\\n\\r\\n        createRWAFeeMin = initialCreateRWAFeeMin;\\r\\n        createRWAFeeMax = initialCreateRWAFeeMax;\\r\\n        createPoolFeeRatioMin = initialCreatePoolFeeRatioMin;\\r\\n        createPoolFeeRatioMax = initialCreatePoolFeeRatioMax;\\r\\n\\r\\n        expectedHoldAmountMin = initialExpectedHoldAmountMin;\\r\\n        expectedHoldAmountMax = initialExpectedHoldAmountMax;\\r\\n        expectedRwaAmountMin = initialExpectedRwaAmountMin;\\r\\n        expectedRwaAmountMax = initialExpectedRwaAmountMax;\\r\\n\\r\\n        entryFeePercentMin = initialEntryFeePercentMin;\\r\\n        entryFeePercentMax = initialEntryFeePercentMax;\\r\\n        exitFeePercentMin = initialExitFeePercentMin;\\r\\n        exitFeePercentMax = initialExitFeePercentMax;\\r\\n\\r\\n        rewardPercentMin = initialRewardPercentMin;\\r\\n        rewardPercentMax = initialRewardPercentMax;\\r\\n\\r\\n        entryPeriodMinDuration = initialEntryPeriodMinDuration;\\r\\n        entryPeriodMaxDuration = initialEntryPeriodMaxDuration;\\r\\n        completionPeriodMinDuration = initialCompletionPeriodMinDuration;\\r\\n        completionPeriodMaxDuration = initialCompletionPeriodMaxDuration;\\r\\n        maxEntryStartPastOffset = initialMaxEntryStartPastOffset;\\r\\n        maxEntryStartFutureOffset = initialMaxEntryStartFutureOffset;\\r\\n\\r\\n        outgoingTranchesMinCount = initialOutgoingTranchesMinCount;\\r\\n        outgoingTranchesMaxCount = initialOutgoingTranchesMaxCount;\\r\\n        outgoingTranchesMinPercent = initialOutgoingTranchesMinPercent;\\r\\n        outgoingTranchesMaxPercent = initialOutgoingTranchesMaxPercent;\\r\\n        outgoingTranchesMinInterval = initialOutgoingTranchesMinInterval;\\r\\n\\r\\n        incomingTranchesMinCount = initialIncomingTranchesMinCount;\\r\\n        incomingTranchesMaxCount = initialIncomingTranchesMaxCount;\\r\\n        incomingTranchesMinPercent = initialIncomingTranchesMinPercent;\\r\\n        incomingTranchesMaxPercent = initialIncomingTranchesMaxPercent;\\r\\n        incomingTranchesMinInterval = initialIncomingTranchesMinInterval;\\r\\n\\r\\n        // Set initial liquidity coefficients\\r\\n        require(initialPriceImpactPercentages.length == initialCoefficients.length, \\\"Arrays length mismatch\\\");\\r\\n        require(initialPriceImpactPercentages.length > 0, \\\"Empty arrays\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < initialPriceImpactPercentages.length; i++) {\\r\\n            require(initialCoefficients[i] > 0, \\\"Invalid coefficient\\\");\\r\\n            liquidityCoefficients[initialPriceImpactPercentages[i]] = initialCoefficients[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uniqueContractId() public pure override returns (bytes32) {\\r\\n        return keccak256(\\\"Config\\\");\\r\\n    }\\r\\n\\r\\n    function implementationVersion() public pure override returns (uint256) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function _verifyAuthorizeUpgradeRole() internal view override {\\r\\n        addressBook.requireTimelock(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates base metadata URI\\r\\n    /// @param newBaseMetadataUri New base URI for metadata\\r\\n    function updateBaseMetadataUri(string memory newBaseMetadataUri) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        baseMetadataUri = newBaseMetadataUri;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates hold token address\\r\\n    /// @param newHoldToken New hold token address\\r\\n    function updateHoldToken(address newHoldToken) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newHoldToken != address(0), \\\"Invalid hold token\\\");\\r\\n        holdToken = IERC20(newHoldToken);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates minimum required number of signers\\r\\n    /// @param newMinSignersRequired New minimum number of signers required\\r\\n    function updateMinSignersRequired(uint256 newMinSignersRequired) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMinSignersRequired > 0, \\\"Invalid min signers\\\");\\r\\n        minSignersRequired = newMinSignersRequired;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates RWA creation fee range\\r\\n    /// @param newMin New minimum fee\\r\\n    /// @param newMax New maximum fee\\r\\n    function updateCreateRWAFeeRange(uint256 newMin, uint256 newMax) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMin < newMax, \\\"Invalid RWA fee range\\\");\\r\\n        createRWAFeeMin = newMin;\\r\\n        createRWAFeeMax = newMax;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates pool creation fee ratio range\\r\\n    /// @param newMin New minimum ratio\\r\\n    /// @param newMax New maximum ratio\\r\\n    function updateCreatePoolFeeRatioRange(uint256 newMin, uint256 newMax) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMin < newMax, \\\"Invalid pool fee ratio range\\\");\\r\\n        require(newMax <= 10000, \\\"Pool fee ratio too high\\\"); // Max 100%\\r\\n        createPoolFeeRatioMin = newMin;\\r\\n        createPoolFeeRatioMax = newMax;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates expected HOLD amount range\\r\\n    /// @param newMin New minimum amount\\r\\n    /// @param newMax New maximum amount\\r\\n    function updateExpectedHoldAmountRange(uint256 newMin, uint256 newMax) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMin < newMax, \\\"Invalid HOLD range\\\");\\r\\n        expectedHoldAmountMin = newMin;\\r\\n        expectedHoldAmountMax = newMax;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates expected RWA amount range\\r\\n    /// @param newMin New minimum amount\\r\\n    /// @param newMax New maximum amount\\r\\n    function updateExpectedRwaAmountRange(uint256 newMin, uint256 newMax) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMin < newMax, \\\"Invalid RWA range\\\");\\r\\n        expectedRwaAmountMin = newMin;\\r\\n        expectedRwaAmountMax = newMax;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates entry fee percentage range\\r\\n    /// @param newMin New minimum percentage\\r\\n    /// @param newMax New maximum percentage\\r\\n    function updateEntryFeePercentRange(uint256 newMin, uint256 newMax) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMin < newMax, \\\"Invalid entry fee range\\\");\\r\\n        require(newMax <= 10000, \\\"Entry fee too high\\\"); // Max 100%\\r\\n        entryFeePercentMin = newMin;\\r\\n        entryFeePercentMax = newMax;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates exit fee percentage range\\r\\n    /// @param newMin New minimum percentage\\r\\n    /// @param newMax New maximum percentage\\r\\n    function updateExitFeePercentRange(uint256 newMin, uint256 newMax) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMin < newMax, \\\"Invalid exit fee range\\\");\\r\\n        require(newMax <= 10000, \\\"Exit fee too high\\\"); // Max 100%\\r\\n        exitFeePercentMin = newMin;\\r\\n        exitFeePercentMax = newMax;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates reward percentage range\\r\\n    /// @param newMin New minimum percentage\\r\\n    /// @param newMax New maximum percentage\\r\\n    function updateRewardPercentRange(uint256 newMin, uint256 newMax) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMin < newMax, \\\"Invalid reward range\\\");\\r\\n        rewardPercentMin = newMin;\\r\\n        rewardPercentMax = newMax;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates entry period configuration\\r\\n    /// @param newMaxPastOffset New maximum past offset for entry start\\r\\n    /// @param newMaxFutureOffset New maximum future offset for entry start\\r\\n    function updateEntryPeriodConfig(uint256 newMaxPastOffset, uint256 newMaxFutureOffset) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMaxPastOffset > 0, \\\"Invalid past offset\\\");\\r\\n        require(newMaxFutureOffset > newMaxPastOffset, \\\"Invalid future offset\\\");\\r\\n        maxEntryStartPastOffset = newMaxPastOffset;\\r\\n        maxEntryStartFutureOffset = newMaxFutureOffset;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates entry period duration range\\r\\n    /// @param newMin New minimum duration\\r\\n    /// @param newMax New maximum duration\\r\\n    function updateEntryPeriodDurationRange(uint256 newMin, uint256 newMax) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMin > 0, \\\"Invalid entry period min duration\\\");\\r\\n        require(newMax > newMin, \\\"Invalid entry period max duration\\\");\\r\\n        entryPeriodMinDuration = newMin;\\r\\n        entryPeriodMaxDuration = newMax;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates completion period duration range\\r\\n    /// @param newMin New minimum duration\\r\\n    /// @param newMax New maximum duration\\r\\n    function updateCompletionPeriodDurationRange(uint256 newMin, uint256 newMax) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMin > 0, \\\"Invalid completion period min duration\\\");\\r\\n        require(newMax > newMin, \\\"Invalid completion period max duration\\\");\\r\\n        completionPeriodMinDuration = newMin;\\r\\n        completionPeriodMaxDuration = newMax;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates outgoing tranches configuration\\r\\n    function updateOutgoingTranchesConfig(\\r\\n        uint256 newMinCount,\\r\\n        uint256 newMaxCount,\\r\\n        uint256 newMinPercent,\\r\\n        uint256 newMaxPercent,\\r\\n        uint256 newMinInterval\\r\\n    ) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMinCount > 0 && newMaxCount >= newMinCount, \\\"Invalid count range\\\");\\r\\n        require(newMinPercent > 0 && newMaxPercent <= 10000, \\\"Invalid percent range\\\");\\r\\n        require(newMinInterval > 0, \\\"Invalid interval\\\");\\r\\n\\r\\n        outgoingTranchesMinCount = newMinCount;\\r\\n        outgoingTranchesMaxCount = newMaxCount;\\r\\n        outgoingTranchesMinPercent = newMinPercent;\\r\\n        outgoingTranchesMaxPercent = newMaxPercent;\\r\\n        outgoingTranchesMinInterval = newMinInterval;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates incoming tranches configuration\\r\\n    function updateIncomingTranchesConfig(\\r\\n        uint256 newMinCount,\\r\\n        uint256 newMaxCount,\\r\\n        uint256 newMinPercent,\\r\\n        uint256 newMaxPercent,\\r\\n        uint256 newMinInterval\\r\\n    ) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(newMinCount > 0 && newMaxCount >= newMinCount, \\\"Invalid count range\\\");\\r\\n        require(newMinPercent > 0 && newMaxPercent <= 10000, \\\"Invalid percent range\\\");\\r\\n        require(newMinInterval > 0, \\\"Invalid interval\\\");\\r\\n\\r\\n        incomingTranchesMinCount = newMinCount;\\r\\n        incomingTranchesMaxCount = newMaxCount;\\r\\n        incomingTranchesMinPercent = newMinPercent;\\r\\n        incomingTranchesMaxPercent = newMaxPercent;\\r\\n        incomingTranchesMinInterval = newMinInterval;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates liquidity coefficients mapping\\r\\n    /// @param percentages Array of price impact percentages (multiplied by 100)\\r\\n    /// @param coefficients Array of corresponding liquidity coefficients\\r\\n    function updateLiquidityCoefficients(\\r\\n        uint256[] memory percentages,\\r\\n        uint256[] memory coefficients\\r\\n    ) external {\\r\\n        addressBook.requireGovernance(msg.sender);\\r\\n        require(percentages.length == coefficients.length, \\\"Arrays length mismatch\\\");\\r\\n        require(percentages.length > 0, \\\"Empty arrays\\\");\\r\\n\\r\\n        // Set new coefficients\\r\\n        for (uint256 i = 0; i < percentages.length; i++) {\\r\\n            require(coefficients[i] > 0, \\\"Invalid coefficient\\\");\\r\\n            liquidityCoefficients[percentages[i]] = coefficients[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets liquidity coefficient for a given price impact percentage\\r\\n    /// @param percentage Price impact percentage (multiplied by 100)\\r\\n    /// @return coefficient Corresponding liquidity coefficient\\r\\n    function getLiquidityCoefficient(uint256 percentage) external view returns (uint256 coefficient) {\\r\\n        coefficient = liquidityCoefficients[percentage];\\r\\n        require(coefficient > 0, \\\"Coefficient not found\\\");\\r\\n        return coefficient;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb3097614b9a1cb630a571d83f2a73b7b324216851c60754141cb87e92c325f48\",\"license\":\"MIT\"},\"contracts/system/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport { UpgradeableContract } from \\\"../utils/UpgradeableContract.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport { AddressBook } from \\\"./AddressBook.sol\\\";\\r\\n\\r\\ncontract EventEmitter is UpgradeableContract {\\r\\n    /// @notice Address book contract reference\\r\\n    AddressBook public addressBook;\\r\\n    \\r\\n    uint256 public genesisBlock;\\r\\n\\r\\n    constructor() UpgradeableContract() {}\\r\\n\\r\\n    function initialize(address initialAddressBook) external initializer {\\r\\n        __UpgradeableContract_init();\\r\\n\\r\\n        require(initialAddressBook != address(0), \\\"Invalid address book\\\");\\r\\n        addressBook = AddressBook(initialAddressBook);\\r\\n        genesisBlock = block.number;\\r\\n    }\\r\\n\\r\\n    // --- Pool Events Start ---\\r\\n\\r\\n    event Pool_OutgoingTrancheClaimed(\\r\\n        address indexed emittedFrom, \\r\\n        address indexed claimer,\\r\\n        uint256 trancheIndex,\\r\\n        uint256 amountClaimed\\r\\n    );\\r\\n\\r\\n    event Pool_OutgoingClaimSummary(\\r\\n        address indexed emittedFrom, \\r\\n        uint256 totalClaimedAmount,\\r\\n        uint256 outgoingTranchesBalance\\r\\n    );\\r\\n\\r\\n    event Pool_IncomingTrancheUpdate(\\r\\n        address indexed emittedFrom, \\r\\n        address indexed returner,\\r\\n        uint256 trancheIndex,\\r\\n        uint256 amountAppliedToTranche,\\r\\n        bool isNowComplete,\\r\\n        bool wasOnTime\\r\\n    );\\r\\n\\r\\n    event Pool_IncomingReturnSummary(\\r\\n        address indexed emittedFrom, \\r\\n        uint256 totalReturnedAmount,\\r\\n        uint256 lastCompletedIncomingTranche\\r\\n    );\\r\\n\\r\\n    event Pool_FundsFullyReturned(\\r\\n        address indexed emittedFrom, \\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event Pool_RwaMinted(\\r\\n        address indexed emittedFrom, \\r\\n        address indexed minter,\\r\\n        uint256 rwaAmountMinted,\\r\\n        uint256 holdAmountPaid,\\r\\n        uint256 feePaid\\r\\n    );\\r\\n\\r\\n    event Pool_TargetReached(\\r\\n        address indexed emittedFrom, \\r\\n        uint256 outgoingTranchesBalance,\\r\\n        uint256 floatingTimestampOffset\\r\\n    );\\r\\n\\r\\n    event Pool_RwaBurned(\\r\\n        address indexed emittedFrom, \\r\\n        address indexed burner,\\r\\n        uint256 rwaAmountBurned,\\r\\n        uint256 holdAmountReceived,\\r\\n        uint256 bonusAmountReceived,\\r\\n        uint256 holdFeePaid,\\r\\n        uint256 bonusFeePaid\\r\\n    );\\r\\n\\r\\n    event Pool_AwaitingRwaAmountUpdated(\\r\\n        address indexed emittedFrom, \\r\\n        uint256 awaitingRwaAmount\\r\\n    );\\r\\n\\r\\n    event Pool_AwaitingBonusAmountUpdated(\\r\\n        address indexed emittedFrom, \\r\\n        uint256 awaitingBonusAmount\\r\\n    );\\r\\n\\r\\n    event Pool_ReservesUpdated(\\r\\n        address indexed emittedFrom, \\r\\n        uint256 realHoldReserve,\\r\\n        uint256 virtualHoldReserve,\\r\\n        uint256 virtualRwaReserve\\r\\n    );\\r\\n\\r\\n    event Pool_PausedStateChanged(\\r\\n        address indexed emittedFrom, \\r\\n        bool isPaused\\r\\n    );\\r\\n\\r\\n    event Pool_Deployed(\\r\\n        address indexed emittedFrom, \\r\\n        bool awaitCompletionExpired,\\r\\n        bool floatingOutTranchesTimestamps,\\r\\n        address holdToken,\\r\\n        address rwaToken,\\r\\n        uint256 tokenId,\\r\\n        string entityId,\\r\\n        string entityOwnerId,\\r\\n        string entityOwnerType,\\r\\n        address owner,\\r\\n        uint256 expectedHoldAmount,\\r\\n        uint256 expectedRwaAmount,\\r\\n        uint256 expectedBonusAmount,\\r\\n        uint256 rewardPercent,\\r\\n        bool fixedSell,\\r\\n        bool allowEntryBurn,\\r\\n        uint256 entryPeriodStart,\\r\\n        uint256 entryPeriodExpired,\\r\\n        uint256 completionPeriodExpired,\\r\\n        uint256 k,\\r\\n        uint256 entryFeePercent,\\r\\n        uint256 exitFeePercent,\\r\\n        uint256[] outgoingTranches,\\r\\n        uint256[] outgoingTranchTimestamps,\\r\\n        uint256[] incomingTranches,\\r\\n        uint256[] incomingTrancheExpired\\r\\n    );\\r\\n\\r\\n    // --- Pool Emitter Functions Start ---\\r\\n\\r\\n    function emitPool_OutgoingTrancheClaimed(\\r\\n        address claimer,\\r\\n        uint256 trancheIndex,\\r\\n        uint256 amountClaimed\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_OutgoingTrancheClaimed(\\r\\n            msg.sender, \\r\\n            claimer,\\r\\n            trancheIndex,\\r\\n            amountClaimed\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function emitPool_OutgoingClaimSummary(\\r\\n        uint256 totalClaimedAmount,\\r\\n        uint256 outgoingTranchesBalance\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_OutgoingClaimSummary(\\r\\n            msg.sender, \\r\\n            totalClaimedAmount,\\r\\n            outgoingTranchesBalance\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function emitPool_IncomingTrancheUpdate(\\r\\n        address returner,\\r\\n        uint256 trancheIndex,\\r\\n        uint256 amountAppliedToTranche,\\r\\n        bool isNowComplete,\\r\\n        bool wasOnTime\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_IncomingTrancheUpdate(\\r\\n            msg.sender, \\r\\n            returner,\\r\\n            trancheIndex,\\r\\n            amountAppliedToTranche,\\r\\n            isNowComplete,\\r\\n            wasOnTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function emitPool_IncomingReturnSummary(\\r\\n        uint256 totalReturnedAmount,\\r\\n        uint256 lastCompletedIncomingTranche\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_IncomingReturnSummary(\\r\\n            msg.sender, \\r\\n            totalReturnedAmount,\\r\\n            lastCompletedIncomingTranche\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function emitPool_FundsFullyReturned(\\r\\n        uint256 timestamp\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_FundsFullyReturned(msg.sender, timestamp); \\r\\n    }\\r\\n\\r\\n    function emitPool_RwaMinted(\\r\\n        address minter,\\r\\n        uint256 rwaAmountMinted,\\r\\n        uint256 holdAmountPaid,\\r\\n        uint256 feePaid\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_RwaMinted(\\r\\n            msg.sender, \\r\\n            minter,\\r\\n            rwaAmountMinted,\\r\\n            holdAmountPaid,\\r\\n            feePaid\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function emitPool_TargetReached(\\r\\n        uint256 outgoingTranchesBalance,\\r\\n        uint256 floatingTimestampOffset\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_TargetReached(\\r\\n            msg.sender, \\r\\n            outgoingTranchesBalance,\\r\\n            floatingTimestampOffset\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function emitPool_RwaBurned(\\r\\n        address burner,\\r\\n        uint256 rwaAmountBurned,\\r\\n        uint256 holdAmountReceived,\\r\\n        uint256 bonusAmountReceived,\\r\\n        uint256 holdFeePaid,\\r\\n        uint256 bonusFeePaid\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_RwaBurned(\\r\\n            msg.sender, \\r\\n            burner,\\r\\n            rwaAmountBurned,\\r\\n            holdAmountReceived,\\r\\n            bonusAmountReceived,\\r\\n            holdFeePaid,\\r\\n            bonusFeePaid\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function emitPool_AwaitingRwaAmountUpdated(\\r\\n        uint256 awaitingRwaAmount\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_AwaitingRwaAmountUpdated(msg.sender, awaitingRwaAmount); \\r\\n    }\\r\\n\\r\\n    function emitPool_AwaitingBonusAmountUpdated(\\r\\n        uint256 awaitingBonusAmount\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_AwaitingBonusAmountUpdated(msg.sender, awaitingBonusAmount); \\r\\n    }\\r\\n\\r\\n    function emitPool_ReservesUpdated(\\r\\n        uint256 realHoldReserve,\\r\\n        uint256 virtualHoldReserve,\\r\\n        uint256 virtualRwaReserve\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_ReservesUpdated(\\r\\n            msg.sender, \\r\\n            realHoldReserve,\\r\\n            virtualHoldReserve,\\r\\n            virtualRwaReserve\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function emitPool_PausedStateChanged(\\r\\n        bool isPaused\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_PausedStateChanged(msg.sender, isPaused); \\r\\n    }\\r\\n\\r\\n    // Renamed from Pool_StaticConfigured to Pool_Deployed as per user's previous feedback and file state\\r\\n    function emitPool_Deployed(\\r\\n        bool awaitCompletionExpired,\\r\\n        bool floatingOutTranchesTimestamps,\\r\\n        address holdToken,\\r\\n        address rwaToken,\\r\\n        uint256 tokenId,\\r\\n        string memory entityId,\\r\\n        string memory entityOwnerId,\\r\\n        string memory entityOwnerType,\\r\\n        address owner,\\r\\n        uint256 expectedHoldAmount,\\r\\n        uint256 expectedRwaAmount,\\r\\n        uint256 expectedBonusAmount,\\r\\n        uint256 rewardPercent,\\r\\n        bool fixedSell,\\r\\n        bool allowEntryBurn,\\r\\n        uint256 entryPeriodStart,\\r\\n        uint256 entryPeriodExpired,\\r\\n        uint256 completionPeriodExpired,\\r\\n        uint256 k,\\r\\n        uint256 entryFeePercent,\\r\\n        uint256 exitFeePercent,\\r\\n        uint256[] memory outgoingTranches,\\r\\n        uint256[] memory outgoingTranchTimestamps,\\r\\n        uint256[] memory incomingTranches,\\r\\n        uint256[] memory incomingTrancheExpired\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit Pool_Deployed(\\r\\n            msg.sender, \\r\\n            awaitCompletionExpired,\\r\\n            floatingOutTranchesTimestamps,\\r\\n            holdToken,\\r\\n            rwaToken,\\r\\n            tokenId,\\r\\n            entityId,\\r\\n            entityOwnerId,\\r\\n            entityOwnerType,\\r\\n            owner,\\r\\n            expectedHoldAmount,\\r\\n            expectedRwaAmount,\\r\\n            expectedBonusAmount,\\r\\n            rewardPercent,\\r\\n            fixedSell,\\r\\n            allowEntryBurn,\\r\\n            entryPeriodStart,\\r\\n            entryPeriodExpired,\\r\\n            completionPeriodExpired,\\r\\n            k,\\r\\n            entryFeePercent,\\r\\n            exitFeePercent,\\r\\n            outgoingTranches,\\r\\n            outgoingTranchTimestamps,\\r\\n            incomingTranches,\\r\\n            incomingTrancheExpired\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // --- Pool Events End ---\\r\\n\\r\\n\\r\\n    function uniqueContractId() public pure override returns (bytes32) {\\r\\n        return keccak256(\\\"EventEmitter\\\");\\r\\n    }\\r\\n\\r\\n    function implementationVersion() public pure override returns (uint256) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function _verifyAuthorizeUpgradeRole() internal view override {\\r\\n        addressBook.requireTimelock(msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    event RWA_Transfer(\\r\\n        address indexed emittedFrom, \\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event RWA_Deployed(\\r\\n        address indexed emittedFrom, \\r\\n        address owner,\\r\\n        string entityId\\r\\n    );\\r\\n\\r\\n    function emitRWA_Transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender); // Ensure caller is a registered RWA contract\\r\\n        emit RWA_Transfer(msg.sender, from, to, tokenId, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function emitRWA_Deployed( \\r\\n        address owner,\\r\\n        string memory entityId\\r\\n    ) external {\\r\\n        addressBook.requireProtocolContract(msg.sender);\\r\\n        emit RWA_Deployed(msg.sender, owner, entityId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xad6e9abeab7615e7deaaa9e34e04e382b3a0d2655aaa2e73394ffc9681e44b58\",\"license\":\"MIT\"},\"contracts/utils/UpgradeableContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.28;\\r\\n\\r\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport { ERC165Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\r\\nimport { AddressBook } from \\\"../system/AddressBook.sol\\\";\\r\\n\\r\\ninterface IUniqueVersionedContract {\\r\\n    function uniqueContractId() external view returns (bytes32);\\r\\n    function implementationVersion() external view returns (uint256);\\r\\n}\\r\\n\\r\\nabstract contract UpgradeableContract is\\r\\n    IUniqueVersionedContract,\\r\\n    UUPSUpgradeable,\\r\\n    ERC165Upgradeable\\r\\n{\\r\\n    function upgradeToAndCall(\\r\\n        address newImplementation,\\r\\n        bytes memory data\\r\\n    ) public payable virtual override onlyProxy {\\r\\n        require(data.length > 0, \\\"UpgradeableContract: empty upgrade data\\\");\\r\\n        super.upgradeToAndCall(newImplementation, data);\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function __UpgradeableContract_init() internal onlyInitializing {\\r\\n        __UUPSUpgradeable_init();\\r\\n        __ERC165_init();\\r\\n    }\\r\\n\\r\\n    function __UpgradeableContract_init_unchained(address _addressBook) internal onlyInitializing {}\\r\\n\\r\\n    function uniqueContractId() public view virtual returns (bytes32);\\r\\n    function implementationVersion() public view virtual returns (uint256);\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IUniqueVersionedContract).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _verifyAuthorizeUpgradeRole() internal view virtual;\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation) internal view override {\\r\\n        _verifyAuthorizeUpgradeRole();\\r\\n        require(\\r\\n            ERC165Upgradeable(newImplementation).supportsInterface(\\r\\n                type(IUniqueVersionedContract).interfaceId\\r\\n            ),\\r\\n            \\\"UpgradeableContract: new impl not IUniqueVersionedContract\\\"\\r\\n        );\\r\\n        require(\\r\\n            IUniqueVersionedContract(newImplementation).uniqueContractId() == uniqueContractId(),\\r\\n            \\\"UpgradeableContract: uniqueContractId not equals\\\"\\r\\n        );\\r\\n        uint256 newVersion = IUniqueVersionedContract(newImplementation).implementationVersion();\\r\\n        uint256 currentVersion = implementationVersion();\\r\\n        require(\\r\\n            newVersion > currentVersion && newVersion <= currentVersion + 100,\\r\\n            \\\"UpgradeableContract: invalid version upgrade\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x56db3c727ebf8d4c8453715be8705d1ba86f4be65147e60798ce497905cdab21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100ea57306080527ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460ff8160401c166100d9576002600160401b03196001600160401b03821601610073575b60405161302f90816100f08239608051818181610dc3015261226e0152f35b6001600160401b0319166001600160401b039081177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005581527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a13880610054565b63f92ee8a960e01b60005260046000fd5b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8062fdd58e146101c657806301ffc9a7146101c157806306bfcec6146101bc5780630e89341c146101b7578063156e29f6146101b257806318160ddd146101ad5780632eb2c2d6146101a857806337608233146101a35780633f2f5ee21461019e5780634e1273f4146101995780634f1ef286146101945780634f558e791461018f57806352d1902d1461018a578063867884f0146101855780638da5cb5b14610180578063a22cb4651461017b578063ab95a63614610176578063ac4afa3814610171578063ad3cb1cc1461016c578063b4aa6d3e14610167578063bd85b03914610162578063c21ab7f91461015d578063d92fc67b14610158578063e985e9c514610153578063f242432a1461014e578063f5298aca146101495763f5887cdd1461014457600080fd5b6114a7565b6113cb565b6112c7565b611282565b611264565b611153565b61111a565b611072565b61102b565b610fe2565b610f3a565b610e88565b610e55565b610e1a565b610db0565b610d75565b610b64565b610aa3565b6109cc565b6108fc565b61082e565b6106f3565b6104f3565b61035d565b6102e5565b610251565b6101e1565b6001600160a01b038116036101dc57565b600080fd5b346101dc5760403660031901126101dc576020610236600435610203816101cb565b602435600052600080516020612f5a833981519152835260406000209060018060a01b0316600052602052604060002090565b54604051908152f35b6001600160e01b03198116036101dc57565b346101dc5760203660031901126101dc5760043561026e8161023f565b63ffffffff60e01b16636cdb3d1360e11b81149081156102c9575b811561029e575b506040519015158152602090f35b634063a51b60e11b8114915081156102b8575b5038610290565b6301ffc9a760e01b149050386102b1565b6303a24d0760e21b81149150610289565b60009103126101dc57565b346101dc5760003660031901126101dc57602060405160018152f35b60005b8381106103145750506000910152565b8181015183820152602001610304565b9060209161033d81518092818552858086019101610301565b601f01601f1916010190565b90602061035a928181520190610324565b90565b346101dc5760203660031901126101dc5760048035801515806104c4575b61038490611542565b6032546020906103a4906001600160a01b03165b6001600160a01b031690565b6040516379502c5560e01b815293849182905afa918215610490576004926000918291610495575b5060405163763c87bf60e01b815293849182906001600160a01b03165afa91821561049057610463926104369261045792600092610467575b506104499061044361043661042261041c30611f03565b93611fde565b92610443604051988997602089019061160d565b602f60f81b815260010190565b9061160d565b03601f198101835282610734565b60405191829182610349565b0390f35b610449919250610489903d806000833e6104818183610734565b8101906115af565b9190610405565b6115a3565b6104b7915060203d6020116104bd575b6104af8183610734565b81019061158e565b386103cc565b503d6104a5565b5060385481111561037b565b60609060031901126101dc576004356104e8816101cb565b906024359060443590565b346101dc57610501366104d0565b90916001600160a01b038116156106ba5761051d821515611624565b602061055c604051936105308386610734565b600085526000959160405192600184526020840152604083019160018352606084015260808301604052565b909161056a82848689612b62565b855b835181101561066c57603254600490839061058f906001600160a01b0316610398565b6040516309ff78c360e41b815292839182905afa90811561049057889161064f575b506001600160a01b031690876105c78287611d8e565b51926105d38387611d8e565b5190803b1561064b576040516318ffb5b960e31b81526001600160a01b0384811660048301528a166024820152604481019590955260648501919091528390608490829084905af191821561049057600192610631575b500161056c565b8061063f8a61064593610734565b806102da565b3861062a565b8280fd5b6106669150833d85116104bd576104af8183610734565b386105b1565b50919392916001600160a01b038316610683578580f35b84516001036106a7578061069e950151910151918533612a73565b38808080808580f35b5090926106b593853361293e565b61069e565b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606490fd5b346101dc5760003660031901126101dc576020600080516020612f9a83398151915254604051908152f35b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b0382111761075557604052565b61071e565b6001600160401b0381116107555760051b60200190565b9080601f830112156101dc5781356107888161075a565b926107966040519485610734565b81845260208085019260051b8201019283116101dc57602001905b8282106107be5750505090565b81358152602091820191016107b1565b6001600160401b03811161075557601f01601f191660200190565b81601f820112156101dc57602081359101610803826107ce565b926108116040519485610734565b828452828201116101dc5781600092602092838601378301015290565b346101dc5760a03660031901126101dc5760043561084b816101cb565b60243590610858826101cb565b6044356001600160401b0381116101dc57610877903690600401610771565b6064356001600160401b0381116101dc57610896903690600401610771565b90608435936001600160401b0385116101dc576108ba6108c09536906004016107e9565b93611670565b005b90600182811c921680156108f2575b60208310146108dc57565b634e487b7160e01b600052602260045260246000fd5b91607f16916108d1565b346101dc5760003660031901126101dc5760405160365460009081610920826108c2565b80855291600181169081156109a55750600114610948575b6104638461045781860382610734565b603681527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8939250905b80821061098b5750909150810160200161045782610938565b919260018160209254838588010152019101909291610972565b60ff191660208087019190915292151560051b850190920192506104579150839050610938565b346101dc5760a03660031901126101dc576004356109e9816101cb565b602435906109f6826101cb565b6044356001600160401b0381116101dc57610a159036906004016107e9565b6064356001600160401b0381116101dc57610a349036906004016107e9565b90608435936001600160401b0385116101dc57610a586108c09536906004016107e9565b936116c3565b906020808351928381520192019060005b818110610a7c5750505090565b8251845260209384019390920191600101610a6f565b90602061035a928181520190610a5e565b346101dc5760403660031901126101dc576004356001600160401b0381116101dc57366023820112156101dc57806004013590610adf8261075a565b91610aed6040519384610734565b8083526024602084019160051b830101913683116101dc57602401905b828210610b4a57836024356001600160401b0381116101dc5761046391610b38610b3e923690600401610771565b90611da7565b60405191829182610a92565b602080918335610b59816101cb565b815201910190610b0a565b60403660031901126101dc57600435610b7c816101cb565b6024356001600160401b0381116101dc57610b9b9036906004016107e9565b610ba3612264565b805115610d2057610bb2612264565b610bba612b13565b6040516301ffc9a760e01b8152634063a51b60e11b60048201526001600160a01b0383169290602081602481875afa801561049057610c0191600091610cf1575b50612620565b604051630867884f60e41b8152602081600481875afa93841561049057610c577fd6f71decda5dca76d35578208fe361cbee0e75819cc58c233e843e05061a91bf600496602094600091610cd4575b50146126a1565b60405163035fe76360e11b815294859182905afa928315610490576108c093610c9491600091610ca5575b50600181119081610c99575b50612706565b612767565b60659150111538610c8e565b610cc7915060203d602011610ccd575b610cbf8183610734565b810190612692565b38610c82565b503d610cb5565b610ceb9150853d8711610ccd57610cbf8183610734565b38610c50565b610d13915060203d602011610d19575b610d0b8183610734565b81019061260b565b38610bfb565b503d610d01565b60405162461bcd60e51b815260206004820152602760248201527f5570677261646561626c65436f6e74726163743a20656d7074792075706772616044820152666465206461746160c81b6064820152608490fd5b346101dc5760203660031901126101dc57600435600052600080516020612f7a83398151915260205260206040600020541515604051908152f35b346101dc5760003660031901126101dc577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610e09576020604051600080516020612f3a8339815191528152f35b63703e46dd60e11b60005260046000fd5b346101dc5760003660031901126101dc5760206040517fd6f71decda5dca76d35578208fe361cbee0e75819cc58c233e843e05061a91bf8152f35b346101dc5760003660031901126101dc576033546040516001600160a01b039091168152602090f35b801515036101dc57565b346101dc5760403660031901126101dc57600435610ea5816101cb565b602435610eb181610e7e565b6001600160a01b038216918215610f2557610ee690610ecf336114d0565b9060018060a01b0316600052602052604060002090565b9015159060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b62ced3e160e81b600052600060045260246000fd5b346101dc5760003660031901126101dc5760405160355460009081610f5e826108c2565b80855291600181169081156109a55750600114610f85576104638461045781860382610734565b603581527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d939250905b808210610fc85750909150810160200161045782610938565b919260018160209254838588010152019101909291610faf565b346101dc5760203660031901126101dc576004356000526037602052602060018060a01b0360406000205416604051908152f35b60405190611025602083610734565b60008252565b346101dc5760003660031901126101dc57610463604080519061104e8183610734565b60058252640352e302e360dc1b602083015251918291602083526020830190610324565b346101dc5760003660031901126101dc5760405160345460009081611096826108c2565b80855291600181169081156109a557506001146110bd576104638461045781860382610734565b603481527f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c1939250905b8082106111005750909150810160200161045782610938565b9192600181602092548385880101520191019092916110e7565b346101dc5760203660031901126101dc57600435600052600080516020612f7a8339815191526020526020604060002054604051908152f35b346101dc5760203660031901126101dc57600435611170816101cb565b603254611185906001600160a01b0316610398565b90813b156101dc576040516309a8745f60e01b815233600482015291600090839060249082905afa918215610490576104639261124f575b5061123f6111cc603854611e55565b916111d683603855565b6000838152603760205260409020546111f8906001600160a01b031615611e69565b61120c6001600160a01b0382161515611eac565b611220836000526037602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040519081529081906020820190565b8061063f600061125e93610734565b386111bd565b346101dc5760003660031901126101dc576020603854604051908152f35b346101dc5760403660031901126101dc57602060ff6112bb6004356112a6816101cb565b610ecf602435916112b6836101cb565b6114d0565b54166040519015158152f35b346101dc5760a03660031901126101dc576004356112e4816101cb565b6024356112f0816101cb565b60443590606435926084356001600160401b0381116101dc576113179036906004016107e9565b926001600160a01b03821633811415806113ba575b6113a2576001600160a01b0384161561138c5715611377576108c09461136f60405192600184526020840152604083019160018352606084015260808301604052565b92909161247a565b626a0d4560e21b600052600060045260246000fd5b632bfa23e760e11b600052600060045260246000fd5b63711bec9160e11b6000523360045260245260446000fd5b506113c53384611eef565b1561132c565b346101dc576113d9366104d0565b906001600160a01b03831615611470576113f4821515611624565b6000818152600080516020612f5a833981519152602090815260408083206001600160a01b0387168452909152902082905410611434576108c0926122c3565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081858d8dbdd5b9d608a1b6044820152606490fd5b346101dc5760003660031901126101dc576032546040516001600160a01b039091168152602090f35b6001600160a01b031660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45016020526040902090565b61153e91600052600080516020612f5a83398151915260205260406000209060018060a01b0316600052602052604060002090565b5490565b1561154957565b60405162461bcd60e51b815260206004820152601f60248201527f55524920717565727920666f72206e6f6e6578697374656e7420746f6b656e006044820152606490fd5b908160209103126101dc575161035a816101cb565b6040513d6000823e3d90fd5b6020818303126101dc578051906001600160401b0382116101dc570181601f820112156101dc5780516115e1816107ce565b926115ef6040519485610734565b818452602082840101116101dc5761035a9160208085019101610301565b9061162060209282815194859201610301565b0190565b1561162b57565b60405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606490fd5b939291906001600160a01b03851633811415806116ab575b6113a2576001600160a01b0382161561138c5715611377576116a99461247a565b565b5060ff6116bb33610ecf896114d0565b541615611688565b92909391600080516020612fba83398151915254946001600160401b036117006116f360ff8960401c1615151590565b976001600160401b031690565b1680159081611822575b6001149081611818575b15908161180f575b506117fe57611761948661175860016001600160401b0319600080516020612fba833981519152541617600080516020612fba83398151915255565b6117c257611c1c565b61176757565b61179360ff60401b19600080516020612fba8339815191525416600080516020612fba83398151915255565b604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1565b6117f96801000000000000000060ff60401b19600080516020612fba833981519152541617600080516020612fba83398151915255565b611c1c565b63f92ee8a960e01b60005260046000fd5b9050153861171c565b303b159150611714565b87915061170a565b1561183157565b60405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21037bbb732b960991b6044820152606490fd5b1561186d57565b60405162461bcd60e51b8152602060048201526013602482015272496e76616c69642061646472657373426f6f6b60681b6044820152606490fd5b601f81116118b4575050565b600080516020612fda8339815191526000526020600020906020601f840160051c830193106118fe575b601f0160051c01905b8181106118f2575050565b600081556001016118e7565b90915081906118de565b601f821161191557505050565b6000526020600020906020601f840160051c83019310611950575b601f0160051c01905b818110611944575050565b60008155600101611939565b9091508190611930565b9081516001600160401b038111610755576119818161197a6034546108c2565b6034611908565b602092601f82116001146119c3576119b3929382916000926119b8575b50508160011b916000199060031b1c19161790565b603455565b01519050388061199e565b6034600052601f198216937f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c19160005b868110611a2a5750836001959610611a11575b505050811b01603455565b015160001960f88460031b161c19169055388080611a06565b919260206001819286850151815501940192016119f3565b9081516001600160401b03811161075557611a6981611a626035546108c2565b6035611908565b602092601f8211600114611a9f57611a9a929382916000926119b85750508160011b916000199060031b1c19161790565b603555565b6035600052601f198216937fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d9160005b868110611b065750836001959610611aed575b505050811b01603555565b015160001960f88460031b161c19169055388080611ae2565b91926020600181928685015181550194019201611acf565b9081516001600160401b03811161075557611b4581611b3e6036546108c2565b6036611908565b602092601f8211600114611b7b57611b76929382916000926119b85750508160011b916000199060031b1c19161790565b603655565b6036600052601f198216937f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b89160005b868110611be25750836001959610611bc9575b505050811b01603655565b015160001960f88460031b161c19169055388080611bbe565b91926020600181928685015181550194019201611bab565b6001600160a01b03909116815260406020820181905261035a92910190610324565b91939092611cc592611cc09190611c9790611c416001600160a01b038816151561182a565b6001600160a01b0316611c55811515611866565b611c5d612136565b611c6d611c68611016565b61214e565b611c756125dd565b60018060a01b03166bffffffffffffffffffffffff60a01b6032541617603255565b603380546001600160a01b0319166001600160a01b038716179055611cbb8661195a565b611a42565b611b1e565b603254600490602090611ce0906001600160a01b0316610398565b6040516309ff78c360e41b815292839182905afa90811561049057600091611d59575b506001600160a01b031691823b156101dc57611d39926000928360405180968195829463ca79042960e01b845260048401611bfa565b03925af1801561049057611d4a5750565b8061063f60006116a993610734565b611d72915060203d6020116104bd576104af8183610734565b38611d03565b634e487b7160e01b600052603260045260246000fd5b8051821015611da25760209160051b010190565b611d78565b91909180518351808203611e28575050805190611dc38261075a565b91611dd16040519384610734565b808352611de0601f199161075a565b0136602084013760005b8151811015611e215780611e1060019260051b6020808287010151918901015190611509565b611e1a8286611d8e565b5201611dea565b5090925050565b635b05999160e01b60005260045260245260446000fd5b634e487b7160e01b600052601160045260246000fd5b6000198114611e645760010190565b611e3f565b15611e7057565b60405162461bcd60e51b8152602060048201526014602482015273546f6b656e20616c72656164792065786973747360601b6044820152606490fd5b15611eb357565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c696420706f6f6c206164647265737360601b6044820152606490fd5b60ff91610ecf611efe926114d0565b541690565b6001600160a01b031680611f17602a611fac565b916030611f238461243f565b536078611f2f8461244c565b53611f3a6028612424565b60018111611f645750611f4b575090565b63e22e27eb60e01b600052600452601460245260446000fd5b90600f81166010811015611da257611fa791611fa1916f181899199a1a9b1b9c1cb0b131b232b360811b901a611f9a858861245c565b5360041c90565b9161246d565b611f3a565b90611fb6826107ce565b611fc36040519182610734565b8281528092611fd4601f19916107ce565b0190602036910137565b8060009172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015612113575b806d04ee2d6d415b85acef8100000000600a9210156120f7575b662386f26fc100008110156120e2575b6305f5e1008110156120d0575b6127108110156120c0575b60648110156120b1575b10156120a6575b612091602161206560018501611fac565b938401015b60001901916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a8353600a900490565b80156120a157612091909161206a565b505090565b600190910190612054565b6002906064900493019261204d565b6004906127109004930192612043565b6008906305f5e1009004930192612038565b601090662386f26fc10000900493019261202b565b6020906d04ee2d6d415b85acef8100000000900493019261201b565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104612001565b61213e6125dd565b6121466125dd565b6116a96125dd565b906121576125dd565b81516001600160401b0381116107555761218881612183600080516020612fda833981519152546108c2565b6118a8565b602092601f82116001146121cb576121b9929382916000926119b85750508160011b916000199060031b1c19161790565b600080516020612fda83398151915255565b600080516020612fda833981519152600052601f198216937ff429cb5e2ec84cbb765e76b31964a56ccde03e7a6122d6cc4afb19edc55edeed9160005b86811061224c5750836001959610612233575b505050811b01600080516020612fda83398151915255565b015160001960f88460031b161c1916905538808061221b565b91926020600181928685015181550194019201612208565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163081149081156122a0575b50610e0957565b600080516020612f3a833981519152546001600160a01b03161415905038612299565b92916001600160a01b03841615611377576122fb60405192600184526020840152604083019160018352606084015260808301604052565b600093919350602060006040516123128382610734565b526123208286600086612b62565b60005b855181101561241c576032546004908390612346906001600160a01b0316610398565b6040516309ff78c360e41b815292839182905afa908115610490576000916123ff575b506001600160a01b03169061237e8188611d8e565b519161238a8286611d8e565b5192813b156101dc576040516318ffb5b960e31b81526001600160a01b038816600482015260006024820181905260448201929092526064810194909452908390608490829084905af1918215610490576001926123ea575b5001612323565b8061063f60006123f993610734565b386123e3565b6124169150833d85116104bd576104af8183610734565b38612369565b505050509050565b9060018201809211611e6457565b91908201809211611e6457565b805115611da25760200190565b805160011015611da25760210190565b908151811015611da2570160200190565b8015611e64576000190190565b9291909461248a83838887612b62565b60005b8251811015612589576032546004906020906124b1906001600160a01b0316610398565b6040516309ff78c360e41b815292839182905afa9081156104905760009161256b575b506001600160a01b0316906124e98185611d8e565b51916124f58287611d8e565b5192813b156101dc576040516318ffb5b960e31b81526001600160a01b0389811660048301528b166024820152604481019190915260648101939093526000908390608490829084905af191821561049057600192612556575b500161248d565b8061063f600061256593610734565b3861254f565b612583915060203d81116104bd576104af8183610734565b386124d4565b509490939291906001600160a01b0381166125a6575b5050505050565b84516001036125cc576020806125c29601519201519233612a73565b388080808061259f565b6125d89491923361293e565b6125c2565b60ff600080516020612fba8339815191525460401c16156125fa57565b631afcd79f60e31b60005260046000fd5b908160209103126101dc575161035a81610e7e565b1561262757565b60405162461bcd60e51b815260206004820152603a60248201527f5570677261646561626c65436f6e74726163743a206e657720696d706c206e6f60448201527f742049556e6971756556657273696f6e6564436f6e74726163740000000000006064820152608490fd5b908160209103126101dc575190565b156126a857565b60405162461bcd60e51b815260206004820152603060248201527f5570677261646561626c65436f6e74726163743a20756e69717565436f6e747260448201526f6163744964206e6f7420657175616c7360801b6064820152608490fd5b1561270d57565b60405162461bcd60e51b815260206004820152602c60248201527f5570677261646561626c65436f6e74726163743a20696e76616c69642076657260448201526b73696f6e207570677261646560a01b6064820152608490fd5b6040516352d1902d60e01b81529091906020816004816001600160a01b0387165afa60009181612885575b506127b557634c9c8ce360e01b6000526001600160a01b03831660045260246000fd5b600080516020612f3a83398151915281036128715750813b1561284f57600080516020612f3a83398151915280546001600160a01b0319166001600160a01b0384169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28051156128355761283291612ca8565b50565b50503461283e57565b63b398979f60e01b60005260046000fd5b50634c9c8ce360e01b60009081526001600160a01b0391909116600452602490fd5b632a87526960e21b60005260045260246000fd5b61289f91925060203d602011610ccd57610cbf8183610734565b9038612792565b908160209103126101dc575161035a8161023f565b6001600160a01b0391821681529116602082015260a06040820181905261035a949193919261290092916128f29190860190610a5e565b908482036060860152610a5e565b916080818403910152610324565b3d15612939573d9061291f826107ce565b9161292d6040519384610734565b82523d6000602084013e565b606090565b9091949293853b612952575b505050505050565b60209361297491604051968795869563bc197c8160e01b8752600487016128bb565b038160006001600160a01b0387165af160009181612a09575b506129c9575061299b61290e565b80519190826129c257632bfa23e760e11b6000526001600160a01b03821660045260246000fd5b9050602001fd5b6001600160e01b0319166343e6837f60e01b016129ec575038808080808061294a565b632bfa23e760e11b6000526001600160a01b031660045260246000fd5b612a2c91925060203d602011612a33575b612a248183610734565b8101906128a6565b903861298d565b503d612a1a565b6001600160a01b039182168152911660208201526040810191909152606081019190915260a06080820181905261035a92910190610324565b9091949293853b612a8657505050505050565b602093612aa891604051968795869563f23a6e6160e01b875260048701612a3a565b038160006001600160a01b0387165af160009181612af2575b50612acf575061299b61290e565b6001600160e01b031916630dc5919f60e01b016129ec575038808080808061294a565b612b0c91925060203d602011612a3357612a248183610734565b9038612ac1565b6032546000906001600160a01b0316803b15612b5e57816024916040519283809263d58e836b60e01b82523360048301525afa801561049057612b54575050565b8161283291610734565b5080fd5b939293612b7185848484612ceb565b6001600160a01b031615612c10575b6001600160a01b031615612b9357509050565b6000805b8251821015612be4576001908260051b90612bd5602080848a0101519387010151600052600080516020612f7a833981519152602052604060002090565b82815403905501910190612b97565b9150506116a9919250600080516020612f9a8339815191525403600080516020612f9a83398151915255565b91600090815b8351831015612c7157612c696001918460051b90612c57602080848c0101519389010151600052600080516020612f7a833981519152602052604060002090565b612c62838254612432565b9055612432565b920191612c16565b612ca391949250612c9190600080516020612f9a83398151915254612432565b600080516020612f9a83398151915255565b612b80565b60008061035a93602081519101845af4612cc061290e565b91612ed8565b9091612cdd61035a93604084526040840190610a5e565b916020818403910152610a5e565b9392918051835190818103612ec157505060005b8151811015612e1b578060051b90602080838501015192860101518460018060a01b038916612d7e575b6001936001600160a01b038216612d44575b50505001612cff565b612d7491610ecf612d6c92600052600080516020612f5a833981519152602052604060002090565b918254612432565b9055388481612d3b565b509091612da688610ecf83600052600080516020612f5a833981519152602052604060002090565b54828110612de457829160019493879203612ddc8b610ecf84600052600080516020612f5a833981519152602052604060002090565b559350612d29565b6040516303dee4c560e01b81526001600160a01b038a16600482015260248101919091526044810183905260648101829052608490fd5b508051939493919291600103612e7e576020908101519181015160408051938452918301526001600160a01b03928316939092169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291819081015b0390a4565b6040516001600160a01b03938416949093169233927f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb928291612e799183612cc6565b635b05999160e01b60005260045260245260446000fd5b90612efe5750805115612eed57805190602001fd5b63d6bda27560e01b60005260046000fd5b81511580612f30575b612f0f575090565b639996b31560e01b60009081526001600160a01b0391909116600452602490fd5b50803b15612f0756fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45004a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e28004a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2801f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0088be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4502a2646970667358221220f60947112c53e66c052f683fcfe452caafb499f2daf07866c90777477c65d18664736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8062fdd58e146101c657806301ffc9a7146101c157806306bfcec6146101bc5780630e89341c146101b7578063156e29f6146101b257806318160ddd146101ad5780632eb2c2d6146101a857806337608233146101a35780633f2f5ee21461019e5780634e1273f4146101995780634f1ef286146101945780634f558e791461018f57806352d1902d1461018a578063867884f0146101855780638da5cb5b14610180578063a22cb4651461017b578063ab95a63614610176578063ac4afa3814610171578063ad3cb1cc1461016c578063b4aa6d3e14610167578063bd85b03914610162578063c21ab7f91461015d578063d92fc67b14610158578063e985e9c514610153578063f242432a1461014e578063f5298aca146101495763f5887cdd1461014457600080fd5b6114a7565b6113cb565b6112c7565b611282565b611264565b611153565b61111a565b611072565b61102b565b610fe2565b610f3a565b610e88565b610e55565b610e1a565b610db0565b610d75565b610b64565b610aa3565b6109cc565b6108fc565b61082e565b6106f3565b6104f3565b61035d565b6102e5565b610251565b6101e1565b6001600160a01b038116036101dc57565b600080fd5b346101dc5760403660031901126101dc576020610236600435610203816101cb565b602435600052600080516020612f5a833981519152835260406000209060018060a01b0316600052602052604060002090565b54604051908152f35b6001600160e01b03198116036101dc57565b346101dc5760203660031901126101dc5760043561026e8161023f565b63ffffffff60e01b16636cdb3d1360e11b81149081156102c9575b811561029e575b506040519015158152602090f35b634063a51b60e11b8114915081156102b8575b5038610290565b6301ffc9a760e01b149050386102b1565b6303a24d0760e21b81149150610289565b60009103126101dc57565b346101dc5760003660031901126101dc57602060405160018152f35b60005b8381106103145750506000910152565b8181015183820152602001610304565b9060209161033d81518092818552858086019101610301565b601f01601f1916010190565b90602061035a928181520190610324565b90565b346101dc5760203660031901126101dc5760048035801515806104c4575b61038490611542565b6032546020906103a4906001600160a01b03165b6001600160a01b031690565b6040516379502c5560e01b815293849182905afa918215610490576004926000918291610495575b5060405163763c87bf60e01b815293849182906001600160a01b03165afa91821561049057610463926104369261045792600092610467575b506104499061044361043661042261041c30611f03565b93611fde565b92610443604051988997602089019061160d565b602f60f81b815260010190565b9061160d565b03601f198101835282610734565b60405191829182610349565b0390f35b610449919250610489903d806000833e6104818183610734565b8101906115af565b9190610405565b6115a3565b6104b7915060203d6020116104bd575b6104af8183610734565b81019061158e565b386103cc565b503d6104a5565b5060385481111561037b565b60609060031901126101dc576004356104e8816101cb565b906024359060443590565b346101dc57610501366104d0565b90916001600160a01b038116156106ba5761051d821515611624565b602061055c604051936105308386610734565b600085526000959160405192600184526020840152604083019160018352606084015260808301604052565b909161056a82848689612b62565b855b835181101561066c57603254600490839061058f906001600160a01b0316610398565b6040516309ff78c360e41b815292839182905afa90811561049057889161064f575b506001600160a01b031690876105c78287611d8e565b51926105d38387611d8e565b5190803b1561064b576040516318ffb5b960e31b81526001600160a01b0384811660048301528a166024820152604481019590955260648501919091528390608490829084905af191821561049057600192610631575b500161056c565b8061063f8a61064593610734565b806102da565b3861062a565b8280fd5b6106669150833d85116104bd576104af8183610734565b386105b1565b50919392916001600160a01b038316610683578580f35b84516001036106a7578061069e950151910151918533612a73565b38808080808580f35b5090926106b593853361293e565b61069e565b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606490fd5b346101dc5760003660031901126101dc576020600080516020612f9a83398151915254604051908152f35b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b0382111761075557604052565b61071e565b6001600160401b0381116107555760051b60200190565b9080601f830112156101dc5781356107888161075a565b926107966040519485610734565b81845260208085019260051b8201019283116101dc57602001905b8282106107be5750505090565b81358152602091820191016107b1565b6001600160401b03811161075557601f01601f191660200190565b81601f820112156101dc57602081359101610803826107ce565b926108116040519485610734565b828452828201116101dc5781600092602092838601378301015290565b346101dc5760a03660031901126101dc5760043561084b816101cb565b60243590610858826101cb565b6044356001600160401b0381116101dc57610877903690600401610771565b6064356001600160401b0381116101dc57610896903690600401610771565b90608435936001600160401b0385116101dc576108ba6108c09536906004016107e9565b93611670565b005b90600182811c921680156108f2575b60208310146108dc57565b634e487b7160e01b600052602260045260246000fd5b91607f16916108d1565b346101dc5760003660031901126101dc5760405160365460009081610920826108c2565b80855291600181169081156109a55750600114610948575b6104638461045781860382610734565b603681527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8939250905b80821061098b5750909150810160200161045782610938565b919260018160209254838588010152019101909291610972565b60ff191660208087019190915292151560051b850190920192506104579150839050610938565b346101dc5760a03660031901126101dc576004356109e9816101cb565b602435906109f6826101cb565b6044356001600160401b0381116101dc57610a159036906004016107e9565b6064356001600160401b0381116101dc57610a349036906004016107e9565b90608435936001600160401b0385116101dc57610a586108c09536906004016107e9565b936116c3565b906020808351928381520192019060005b818110610a7c5750505090565b8251845260209384019390920191600101610a6f565b90602061035a928181520190610a5e565b346101dc5760403660031901126101dc576004356001600160401b0381116101dc57366023820112156101dc57806004013590610adf8261075a565b91610aed6040519384610734565b8083526024602084019160051b830101913683116101dc57602401905b828210610b4a57836024356001600160401b0381116101dc5761046391610b38610b3e923690600401610771565b90611da7565b60405191829182610a92565b602080918335610b59816101cb565b815201910190610b0a565b60403660031901126101dc57600435610b7c816101cb565b6024356001600160401b0381116101dc57610b9b9036906004016107e9565b610ba3612264565b805115610d2057610bb2612264565b610bba612b13565b6040516301ffc9a760e01b8152634063a51b60e11b60048201526001600160a01b0383169290602081602481875afa801561049057610c0191600091610cf1575b50612620565b604051630867884f60e41b8152602081600481875afa93841561049057610c577fd6f71decda5dca76d35578208fe361cbee0e75819cc58c233e843e05061a91bf600496602094600091610cd4575b50146126a1565b60405163035fe76360e11b815294859182905afa928315610490576108c093610c9491600091610ca5575b50600181119081610c99575b50612706565b612767565b60659150111538610c8e565b610cc7915060203d602011610ccd575b610cbf8183610734565b810190612692565b38610c82565b503d610cb5565b610ceb9150853d8711610ccd57610cbf8183610734565b38610c50565b610d13915060203d602011610d19575b610d0b8183610734565b81019061260b565b38610bfb565b503d610d01565b60405162461bcd60e51b815260206004820152602760248201527f5570677261646561626c65436f6e74726163743a20656d7074792075706772616044820152666465206461746160c81b6064820152608490fd5b346101dc5760203660031901126101dc57600435600052600080516020612f7a83398151915260205260206040600020541515604051908152f35b346101dc5760003660031901126101dc577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610e09576020604051600080516020612f3a8339815191528152f35b63703e46dd60e11b60005260046000fd5b346101dc5760003660031901126101dc5760206040517fd6f71decda5dca76d35578208fe361cbee0e75819cc58c233e843e05061a91bf8152f35b346101dc5760003660031901126101dc576033546040516001600160a01b039091168152602090f35b801515036101dc57565b346101dc5760403660031901126101dc57600435610ea5816101cb565b602435610eb181610e7e565b6001600160a01b038216918215610f2557610ee690610ecf336114d0565b9060018060a01b0316600052602052604060002090565b9015159060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b62ced3e160e81b600052600060045260246000fd5b346101dc5760003660031901126101dc5760405160355460009081610f5e826108c2565b80855291600181169081156109a55750600114610f85576104638461045781860382610734565b603581527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d939250905b808210610fc85750909150810160200161045782610938565b919260018160209254838588010152019101909291610faf565b346101dc5760203660031901126101dc576004356000526037602052602060018060a01b0360406000205416604051908152f35b60405190611025602083610734565b60008252565b346101dc5760003660031901126101dc57610463604080519061104e8183610734565b60058252640352e302e360dc1b602083015251918291602083526020830190610324565b346101dc5760003660031901126101dc5760405160345460009081611096826108c2565b80855291600181169081156109a557506001146110bd576104638461045781860382610734565b603481527f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c1939250905b8082106111005750909150810160200161045782610938565b9192600181602092548385880101520191019092916110e7565b346101dc5760203660031901126101dc57600435600052600080516020612f7a8339815191526020526020604060002054604051908152f35b346101dc5760203660031901126101dc57600435611170816101cb565b603254611185906001600160a01b0316610398565b90813b156101dc576040516309a8745f60e01b815233600482015291600090839060249082905afa918215610490576104639261124f575b5061123f6111cc603854611e55565b916111d683603855565b6000838152603760205260409020546111f8906001600160a01b031615611e69565b61120c6001600160a01b0382161515611eac565b611220836000526037602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040519081529081906020820190565b8061063f600061125e93610734565b386111bd565b346101dc5760003660031901126101dc576020603854604051908152f35b346101dc5760403660031901126101dc57602060ff6112bb6004356112a6816101cb565b610ecf602435916112b6836101cb565b6114d0565b54166040519015158152f35b346101dc5760a03660031901126101dc576004356112e4816101cb565b6024356112f0816101cb565b60443590606435926084356001600160401b0381116101dc576113179036906004016107e9565b926001600160a01b03821633811415806113ba575b6113a2576001600160a01b0384161561138c5715611377576108c09461136f60405192600184526020840152604083019160018352606084015260808301604052565b92909161247a565b626a0d4560e21b600052600060045260246000fd5b632bfa23e760e11b600052600060045260246000fd5b63711bec9160e11b6000523360045260245260446000fd5b506113c53384611eef565b1561132c565b346101dc576113d9366104d0565b906001600160a01b03831615611470576113f4821515611624565b6000818152600080516020612f5a833981519152602090815260408083206001600160a01b0387168452909152902082905410611434576108c0926122c3565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081858d8dbdd5b9d608a1b6044820152606490fd5b346101dc5760003660031901126101dc576032546040516001600160a01b039091168152602090f35b6001600160a01b031660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45016020526040902090565b61153e91600052600080516020612f5a83398151915260205260406000209060018060a01b0316600052602052604060002090565b5490565b1561154957565b60405162461bcd60e51b815260206004820152601f60248201527f55524920717565727920666f72206e6f6e6578697374656e7420746f6b656e006044820152606490fd5b908160209103126101dc575161035a816101cb565b6040513d6000823e3d90fd5b6020818303126101dc578051906001600160401b0382116101dc570181601f820112156101dc5780516115e1816107ce565b926115ef6040519485610734565b818452602082840101116101dc5761035a9160208085019101610301565b9061162060209282815194859201610301565b0190565b1561162b57565b60405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606490fd5b939291906001600160a01b03851633811415806116ab575b6113a2576001600160a01b0382161561138c5715611377576116a99461247a565b565b5060ff6116bb33610ecf896114d0565b541615611688565b92909391600080516020612fba83398151915254946001600160401b036117006116f360ff8960401c1615151590565b976001600160401b031690565b1680159081611822575b6001149081611818575b15908161180f575b506117fe57611761948661175860016001600160401b0319600080516020612fba833981519152541617600080516020612fba83398151915255565b6117c257611c1c565b61176757565b61179360ff60401b19600080516020612fba8339815191525416600080516020612fba83398151915255565b604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1565b6117f96801000000000000000060ff60401b19600080516020612fba833981519152541617600080516020612fba83398151915255565b611c1c565b63f92ee8a960e01b60005260046000fd5b9050153861171c565b303b159150611714565b87915061170a565b1561183157565b60405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21037bbb732b960991b6044820152606490fd5b1561186d57565b60405162461bcd60e51b8152602060048201526013602482015272496e76616c69642061646472657373426f6f6b60681b6044820152606490fd5b601f81116118b4575050565b600080516020612fda8339815191526000526020600020906020601f840160051c830193106118fe575b601f0160051c01905b8181106118f2575050565b600081556001016118e7565b90915081906118de565b601f821161191557505050565b6000526020600020906020601f840160051c83019310611950575b601f0160051c01905b818110611944575050565b60008155600101611939565b9091508190611930565b9081516001600160401b038111610755576119818161197a6034546108c2565b6034611908565b602092601f82116001146119c3576119b3929382916000926119b8575b50508160011b916000199060031b1c19161790565b603455565b01519050388061199e565b6034600052601f198216937f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c19160005b868110611a2a5750836001959610611a11575b505050811b01603455565b015160001960f88460031b161c19169055388080611a06565b919260206001819286850151815501940192016119f3565b9081516001600160401b03811161075557611a6981611a626035546108c2565b6035611908565b602092601f8211600114611a9f57611a9a929382916000926119b85750508160011b916000199060031b1c19161790565b603555565b6035600052601f198216937fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d9160005b868110611b065750836001959610611aed575b505050811b01603555565b015160001960f88460031b161c19169055388080611ae2565b91926020600181928685015181550194019201611acf565b9081516001600160401b03811161075557611b4581611b3e6036546108c2565b6036611908565b602092601f8211600114611b7b57611b76929382916000926119b85750508160011b916000199060031b1c19161790565b603655565b6036600052601f198216937f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b89160005b868110611be25750836001959610611bc9575b505050811b01603655565b015160001960f88460031b161c19169055388080611bbe565b91926020600181928685015181550194019201611bab565b6001600160a01b03909116815260406020820181905261035a92910190610324565b91939092611cc592611cc09190611c9790611c416001600160a01b038816151561182a565b6001600160a01b0316611c55811515611866565b611c5d612136565b611c6d611c68611016565b61214e565b611c756125dd565b60018060a01b03166bffffffffffffffffffffffff60a01b6032541617603255565b603380546001600160a01b0319166001600160a01b038716179055611cbb8661195a565b611a42565b611b1e565b603254600490602090611ce0906001600160a01b0316610398565b6040516309ff78c360e41b815292839182905afa90811561049057600091611d59575b506001600160a01b031691823b156101dc57611d39926000928360405180968195829463ca79042960e01b845260048401611bfa565b03925af1801561049057611d4a5750565b8061063f60006116a993610734565b611d72915060203d6020116104bd576104af8183610734565b38611d03565b634e487b7160e01b600052603260045260246000fd5b8051821015611da25760209160051b010190565b611d78565b91909180518351808203611e28575050805190611dc38261075a565b91611dd16040519384610734565b808352611de0601f199161075a565b0136602084013760005b8151811015611e215780611e1060019260051b6020808287010151918901015190611509565b611e1a8286611d8e565b5201611dea565b5090925050565b635b05999160e01b60005260045260245260446000fd5b634e487b7160e01b600052601160045260246000fd5b6000198114611e645760010190565b611e3f565b15611e7057565b60405162461bcd60e51b8152602060048201526014602482015273546f6b656e20616c72656164792065786973747360601b6044820152606490fd5b15611eb357565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c696420706f6f6c206164647265737360601b6044820152606490fd5b60ff91610ecf611efe926114d0565b541690565b6001600160a01b031680611f17602a611fac565b916030611f238461243f565b536078611f2f8461244c565b53611f3a6028612424565b60018111611f645750611f4b575090565b63e22e27eb60e01b600052600452601460245260446000fd5b90600f81166010811015611da257611fa791611fa1916f181899199a1a9b1b9c1cb0b131b232b360811b901a611f9a858861245c565b5360041c90565b9161246d565b611f3a565b90611fb6826107ce565b611fc36040519182610734565b8281528092611fd4601f19916107ce565b0190602036910137565b8060009172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015612113575b806d04ee2d6d415b85acef8100000000600a9210156120f7575b662386f26fc100008110156120e2575b6305f5e1008110156120d0575b6127108110156120c0575b60648110156120b1575b10156120a6575b612091602161206560018501611fac565b938401015b60001901916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a8353600a900490565b80156120a157612091909161206a565b505090565b600190910190612054565b6002906064900493019261204d565b6004906127109004930192612043565b6008906305f5e1009004930192612038565b601090662386f26fc10000900493019261202b565b6020906d04ee2d6d415b85acef8100000000900493019261201b565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104612001565b61213e6125dd565b6121466125dd565b6116a96125dd565b906121576125dd565b81516001600160401b0381116107555761218881612183600080516020612fda833981519152546108c2565b6118a8565b602092601f82116001146121cb576121b9929382916000926119b85750508160011b916000199060031b1c19161790565b600080516020612fda83398151915255565b600080516020612fda833981519152600052601f198216937ff429cb5e2ec84cbb765e76b31964a56ccde03e7a6122d6cc4afb19edc55edeed9160005b86811061224c5750836001959610612233575b505050811b01600080516020612fda83398151915255565b015160001960f88460031b161c1916905538808061221b565b91926020600181928685015181550194019201612208565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163081149081156122a0575b50610e0957565b600080516020612f3a833981519152546001600160a01b03161415905038612299565b92916001600160a01b03841615611377576122fb60405192600184526020840152604083019160018352606084015260808301604052565b600093919350602060006040516123128382610734565b526123208286600086612b62565b60005b855181101561241c576032546004908390612346906001600160a01b0316610398565b6040516309ff78c360e41b815292839182905afa908115610490576000916123ff575b506001600160a01b03169061237e8188611d8e565b519161238a8286611d8e565b5192813b156101dc576040516318ffb5b960e31b81526001600160a01b038816600482015260006024820181905260448201929092526064810194909452908390608490829084905af1918215610490576001926123ea575b5001612323565b8061063f60006123f993610734565b386123e3565b6124169150833d85116104bd576104af8183610734565b38612369565b505050509050565b9060018201809211611e6457565b91908201809211611e6457565b805115611da25760200190565b805160011015611da25760210190565b908151811015611da2570160200190565b8015611e64576000190190565b9291909461248a83838887612b62565b60005b8251811015612589576032546004906020906124b1906001600160a01b0316610398565b6040516309ff78c360e41b815292839182905afa9081156104905760009161256b575b506001600160a01b0316906124e98185611d8e565b51916124f58287611d8e565b5192813b156101dc576040516318ffb5b960e31b81526001600160a01b0389811660048301528b166024820152604481019190915260648101939093526000908390608490829084905af191821561049057600192612556575b500161248d565b8061063f600061256593610734565b3861254f565b612583915060203d81116104bd576104af8183610734565b386124d4565b509490939291906001600160a01b0381166125a6575b5050505050565b84516001036125cc576020806125c29601519201519233612a73565b388080808061259f565b6125d89491923361293e565b6125c2565b60ff600080516020612fba8339815191525460401c16156125fa57565b631afcd79f60e31b60005260046000fd5b908160209103126101dc575161035a81610e7e565b1561262757565b60405162461bcd60e51b815260206004820152603a60248201527f5570677261646561626c65436f6e74726163743a206e657720696d706c206e6f60448201527f742049556e6971756556657273696f6e6564436f6e74726163740000000000006064820152608490fd5b908160209103126101dc575190565b156126a857565b60405162461bcd60e51b815260206004820152603060248201527f5570677261646561626c65436f6e74726163743a20756e69717565436f6e747260448201526f6163744964206e6f7420657175616c7360801b6064820152608490fd5b1561270d57565b60405162461bcd60e51b815260206004820152602c60248201527f5570677261646561626c65436f6e74726163743a20696e76616c69642076657260448201526b73696f6e207570677261646560a01b6064820152608490fd5b6040516352d1902d60e01b81529091906020816004816001600160a01b0387165afa60009181612885575b506127b557634c9c8ce360e01b6000526001600160a01b03831660045260246000fd5b600080516020612f3a83398151915281036128715750813b1561284f57600080516020612f3a83398151915280546001600160a01b0319166001600160a01b0384169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28051156128355761283291612ca8565b50565b50503461283e57565b63b398979f60e01b60005260046000fd5b50634c9c8ce360e01b60009081526001600160a01b0391909116600452602490fd5b632a87526960e21b60005260045260246000fd5b61289f91925060203d602011610ccd57610cbf8183610734565b9038612792565b908160209103126101dc575161035a8161023f565b6001600160a01b0391821681529116602082015260a06040820181905261035a949193919261290092916128f29190860190610a5e565b908482036060860152610a5e565b916080818403910152610324565b3d15612939573d9061291f826107ce565b9161292d6040519384610734565b82523d6000602084013e565b606090565b9091949293853b612952575b505050505050565b60209361297491604051968795869563bc197c8160e01b8752600487016128bb565b038160006001600160a01b0387165af160009181612a09575b506129c9575061299b61290e565b80519190826129c257632bfa23e760e11b6000526001600160a01b03821660045260246000fd5b9050602001fd5b6001600160e01b0319166343e6837f60e01b016129ec575038808080808061294a565b632bfa23e760e11b6000526001600160a01b031660045260246000fd5b612a2c91925060203d602011612a33575b612a248183610734565b8101906128a6565b903861298d565b503d612a1a565b6001600160a01b039182168152911660208201526040810191909152606081019190915260a06080820181905261035a92910190610324565b9091949293853b612a8657505050505050565b602093612aa891604051968795869563f23a6e6160e01b875260048701612a3a565b038160006001600160a01b0387165af160009181612af2575b50612acf575061299b61290e565b6001600160e01b031916630dc5919f60e01b016129ec575038808080808061294a565b612b0c91925060203d602011612a3357612a248183610734565b9038612ac1565b6032546000906001600160a01b0316803b15612b5e57816024916040519283809263d58e836b60e01b82523360048301525afa801561049057612b54575050565b8161283291610734565b5080fd5b939293612b7185848484612ceb565b6001600160a01b031615612c10575b6001600160a01b031615612b9357509050565b6000805b8251821015612be4576001908260051b90612bd5602080848a0101519387010151600052600080516020612f7a833981519152602052604060002090565b82815403905501910190612b97565b9150506116a9919250600080516020612f9a8339815191525403600080516020612f9a83398151915255565b91600090815b8351831015612c7157612c696001918460051b90612c57602080848c0101519389010151600052600080516020612f7a833981519152602052604060002090565b612c62838254612432565b9055612432565b920191612c16565b612ca391949250612c9190600080516020612f9a83398151915254612432565b600080516020612f9a83398151915255565b612b80565b60008061035a93602081519101845af4612cc061290e565b91612ed8565b9091612cdd61035a93604084526040840190610a5e565b916020818403910152610a5e565b9392918051835190818103612ec157505060005b8151811015612e1b578060051b90602080838501015192860101518460018060a01b038916612d7e575b6001936001600160a01b038216612d44575b50505001612cff565b612d7491610ecf612d6c92600052600080516020612f5a833981519152602052604060002090565b918254612432565b9055388481612d3b565b509091612da688610ecf83600052600080516020612f5a833981519152602052604060002090565b54828110612de457829160019493879203612ddc8b610ecf84600052600080516020612f5a833981519152602052604060002090565b559350612d29565b6040516303dee4c560e01b81526001600160a01b038a16600482015260248101919091526044810183905260648101829052608490fd5b508051939493919291600103612e7e576020908101519181015160408051938452918301526001600160a01b03928316939092169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291819081015b0390a4565b6040516001600160a01b03938416949093169233927f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb928291612e799183612cc6565b635b05999160e01b60005260045260245260446000fd5b90612efe5750805115612eed57805190602001fd5b63d6bda27560e01b60005260046000fd5b81511580612f30575b612f0f575090565b639996b31560e01b60009081526001600160a01b0391909116600452602490fd5b50803b15612f0756fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45004a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e28004a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2801f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0088be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4502a2646970667358221220f60947112c53e66c052f683fcfe452caafb499f2daf07866c90777477c65d18664736f6c634300081c0033",
  "devdoc": {
    "details": "Implements ERC1155 standard with upgradeable functionality",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC1155InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC1155InvalidArrayLength(uint256,uint256)": [
        {
          "details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
          "params": {
            "idsLength": "Length of the array of token identifiers",
            "valuesLength": "Length of the array of token amounts"
          }
        }
      ],
      "ERC1155InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC1155InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC1155InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC1155MissingApprovalForAll(address,address)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "StringsInsufficientHexLength(uint256,uint256)": [
        {
          "details": "The `value` string doesn't fit in the specified `length`."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256)": {
        "details": "Can only be called by the associated pool",
        "params": {
          "account": "The address to burn tokens from",
          "amount": "The amount of tokens to burn",
          "tokenId": "The ID of the token to burn"
        }
      },
      "createToken(address)": {
        "details": "Can only be called by the factory address registered in AddressBook",
        "params": {
          "pool": "The address of the pool managing this token"
        },
        "returns": {
          "_0": "uint256 token id"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "initialize(address,address,string,string,string)": {
        "details": "Can only be called once",
        "params": {
          "initialAddressBook": "Address of the AddressBook contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(address,uint256,uint256)": {
        "details": "Can only be called by the associated pool",
        "params": {
          "account": "The address to mint tokens to",
          "amount": "The amount of tokens to mint",
          "tokenId": "The ID of the token to mint"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "totalSupply()": {
        "details": "Total value of tokens."
      },
      "totalSupply(uint256)": {
        "details": "Total value of tokens in with a given id."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "uri(uint256)": {
        "params": {
          "tokenId": "The ID of the token"
        },
        "returns": {
          "_0": "string The complete metadata URI for the token"
        }
      }
    },
    "title": "RWA Token Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addressBook()": {
        "notice": "Address book contract reference"
      },
      "burn(address,uint256,uint256)": {
        "notice": "Burns tokens"
      },
      "createToken(address)": {
        "notice": "Creates a new token with specified parameters"
      },
      "initialize(address,address,string,string,string)": {
        "notice": "Initializes the contract"
      },
      "mint(address,uint256,uint256)": {
        "notice": "Mints tokens"
      },
      "owner()": {
        "notice": "Owner address"
      },
      "pools(uint256)": {
        "notice": "Mapping of token ID to pool address"
      },
      "tokensLength()": {
        "notice": "Unique token ID amount"
      },
      "uri(uint256)": {
        "notice": "Gets the metadata URI for a specific token"
      }
    },
    "notice": "Contract for managing real world asset tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20358,
        "contract": "contracts/rwa/RWA.sol:RWA",
        "label": "__gap",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16212,
        "contract": "contracts/rwa/RWA.sol:RWA",
        "label": "addressBook",
        "offset": 0,
        "slot": "50",
        "type": "t_contract(AddressBook)17754"
      },
      {
        "astId": 16215,
        "contract": "contracts/rwa/RWA.sol:RWA",
        "label": "owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 16217,
        "contract": "contracts/rwa/RWA.sol:RWA",
        "label": "entityId",
        "offset": 0,
        "slot": "52",
        "type": "t_string_storage"
      },
      {
        "astId": 16219,
        "contract": "contracts/rwa/RWA.sol:RWA",
        "label": "entityOwnerId",
        "offset": 0,
        "slot": "53",
        "type": "t_string_storage"
      },
      {
        "astId": 16221,
        "contract": "contracts/rwa/RWA.sol:RWA",
        "label": "entityOwnerType",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 16226,
        "contract": "contracts/rwa/RWA.sol:RWA",
        "label": "pools",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16229,
        "contract": "contracts/rwa/RWA.sol:RWA",
        "label": "tokensLength",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_contract(AddressBook)17754": {
        "encoding": "inplace",
        "label": "contract AddressBook",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}